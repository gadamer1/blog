{"ast":null,"code":"import { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from \"../reducers/user/actions\"; // 회원가입 요청\n\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data, {\n    withCredentials: true\n  });\n}\n\nfunction* signUp(action) {\n  try {\n    const User = yield call(signUpAPI, action.payload);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      result: User.data.user\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e.response.status\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n} // 로그인 요청\n\n\nfunction loginAPI(data) {\n  return axios.post(\"/user/login\", data, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const User = yield call(loginAPI, action.payload);\n    yield put({\n      type: LOGIN_SUCCESS,\n      result: User.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOGIN_FAILURE,\n      error: e.response.status\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nfunction loadUserAPI() {\n  return axios.get(\"/user/is-login\", {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    const User = yield call(loadUserAPI);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      result: User.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e.response\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction logoutAPI() {\n  return axios.get(\"/user/logout\", {\n    withCredentials: true\n  });\n}\n\nfunction* logout() {\n  try {\n    const User = yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e.response\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp), fork(watchLoadUser), fork(watchLogout)]);\n}","map":null,"metadata":{},"sourceType":"module"}