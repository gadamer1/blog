{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { EditorState, convertToRaw, convertFromRaw } from \"draft-js\";\nimport Router from \"next/router\";\nimport { Editor } from \"react-draft-wysiwyg\"; //load editor css\n\nimport \"../../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport { Button, Typography, Select, MenuItem, TextField, FormControl, FormLabel, FormControlLabel, Checkbox } from \"@material-ui/core\";\nimport CircularProgressComponent from \"../../../utils/Components/CircularProgressComponent\";\nimport { MAKE_POST_REQUEST, MAKE_POST_FAILURE } from \"../../../reducers/post/actions\";\n\nfunction uploadImageCallBack(file) {\n  return new _Promise(function (resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"https://api.imgur.com/3/image\");\n    xhr.setRequestHeader(\"Authorization\", \"Client-ID b1e6509aad56ae0\");\n    var data = new FormData();\n    data.append(\"image\", file);\n    xhr.send(data);\n    xhr.addEventListener(\"load\", function () {\n      var response = JSON.parse(xhr.responseText);\n      resolve(response);\n    });\n    xhr.addEventListener(\"error\", function () {\n      var error = JSON.parse(xhr.responseText);\n      reject(error);\n    });\n  });\n}\n\nvar MakePostsForm = function MakePostsForm() {\n  var _useState = useState(\"\"),\n      editorState = _useState[0],\n      setEditorState = _useState[1];\n\n  var _useState2 = useState(\"dev\"),\n      category = _useState2[0],\n      setCategory = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      title = _useState3[0],\n      setTitle = _useState3[1];\n\n  var _useState4 = useState(false),\n      hidden = _useState4[0],\n      setHidden = _useState4[1];\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post.loadingStates;\n  }),\n      isPosting = _useSelector.isPosting,\n      isPostingSuccess = _useSelector.isPostingSuccess;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user.user;\n  }),\n      _id = _useSelector2._id,\n      nickname = _useSelector2.nickname; // 포스팅 완료됐으면 튕구기\n\n\n  useEffect(function () {\n    if (isPostingSuccess) {\n      dispatch({\n        type: MAKE_POST_FAILURE\n      });\n      window.localStorage.removeItem(\"category\");\n      window.localStorage.removeItem(\"title\");\n      window.localStorage.removeItem(\"content\");\n      Router.push(\"/postList\");\n    }\n  }, [isPostingSuccess]);\n  useEffect(function () {\n    var content = window.localStorage.getItem(\"content\");\n    var title = window.localStorage.getItem(\"title\");\n    var category = window.localStorage.getItem(\"category\");\n    var hidden = window.localStorage.getItem(\"hidden\");\n\n    if (content) {\n      setEditorState(EditorState.createWithContent(convertFromRaw(JSON.parse(content))));\n    } else {\n      setEditorState(EditorState.createEmpty());\n    }\n\n    if (title) {\n      setTitle(title);\n    } else {\n      setTitle(\"\");\n    }\n\n    if (category) {\n      setCategory(category);\n    } else {\n      setCategory(\"\");\n    }\n  }, []);\n\n  var saveContent = function saveContent(content) {\n    window.localStorage.setItem(\"content\", _JSON$stringify(convertToRaw(content)));\n  };\n\n  var saveTitle = function saveTitle(title) {\n    window.localStorage.setItem(\"title\", title);\n  };\n\n  var saveCategory = function saveCategory(category) {\n    window.localStorage.setItem(\"category\", category);\n  };\n\n  var onChangeEditorState = function onChangeEditorState(editorState) {\n    var contentState = editorState.getCurrentContent();\n    saveContent(contentState);\n    setEditorState(editorState);\n  };\n\n  var _onClickPostButton = function _onClickPostButton(e) {\n    if (title.trim() !== \"\") {\n      dispatch({\n        type: MAKE_POST_REQUEST,\n        payload: {\n          authorId: _id,\n          category: category,\n          // @ts-ignore\n          body: _JSON$stringify(convertToRaw(editorState.getCurrentContent())),\n          title: title,\n          hidden: hidden,\n          nickname: nickname\n        }\n      });\n    }\n  };\n\n  var _onCategoryChange = function _onCategoryChange(e) {\n    saveCategory(e.target.value);\n    setCategory(e.target.value);\n  };\n\n  var _onChangeTitle = function _onChangeTitle(e) {\n    saveTitle(e.target.value);\n    setTitle(e.target.value);\n  };\n\n  var _onChangeHidden = function _onChangeHidden(e) {\n    setHidden(e.target.checked);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(FormControl, null, __jsx(TextField, {\n    id: \"outlined-basic\",\n    label: \"\\uC81C\\uBAA9\",\n    variant: \"outlined\",\n    value: title,\n    onChange: _onChangeTitle\n  }), __jsx(FormLabel, {\n    component: \"legend\"\n  }, \"\\uCE74\\uD14C\\uACE0\\uB9AC\"), __jsx(Select, {\n    value: category,\n    onChange: _onCategoryChange\n  }, __jsx(MenuItem, {\n    value: \"dev\"\n  }, \"\\uAC1C\\uBC1C\"), __jsx(MenuItem, {\n    value: \"hacking\"\n  }, \"\\uD574\\uD0B9\"), __jsx(MenuItem, {\n    value: \"finance\"\n  }, \"\\uC7AC\\uD14C\\uD06C\"), __jsx(MenuItem, {\n    value: \"business\"\n  }, \"\\uBE44\\uC988\\uB2C8\\uC2A4\")), __jsx(Editor //@ts-ignore\n  , {\n    editorState: editorState,\n    editorClassName: \"demo-editor\",\n    onEditorStateChange: onChangeEditorState,\n    localization: {\n      locale: \"ko\"\n    },\n    toolbar: {\n      image: {\n        uploadCallback: uploadImageCallBack,\n        alt: {\n          present: true,\n          mandatory: true\n        }\n      }\n    }\n  }), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: _onClickPostButton,\n    disabled: isPosting\n  }, isPosting ? __jsx(CircularProgressComponent, null) : __jsx(Typography, null, \"\\uD3EC\\uC2A4\\uD305\")), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: hidden,\n      onChange: _onChangeHidden,\n      value: hidden,\n      color: \"primary\"\n    }),\n    label: \"\\uC784\\uC2DC\\uC800\\uC7A5\"\n  })));\n};\n\nexport default MakePostsForm;","map":null,"metadata":{},"sourceType":"module"}