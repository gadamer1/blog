{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(makePost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchMakePost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getPosts),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetPosts),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getPost),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetPost),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport { MAKE_POST_REQUEST, MAKE_POST_SUCCESS, MAKE_POST_FAILURE, GET_POSTS_REQUEST, GET_POSTS_SUCCESS, GET_POSTS_FAILURE, GET_POST_REQUEST, GET_POST_FAILURE, GET_POST_SUCCESS } from \"../reducers/post/actions\";\nimport axios from \"axios\";\n\nfunction makePostAPI(data) {\n  return axios.post(\"/post\", data, {\n    withCredentials: true\n  });\n}\n\nfunction makePost(action) {\n  var Post;\n  return _regeneratorRuntime.wrap(function makePost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(makePostAPI, action.payload);\n\n        case 3:\n          Post = _context.sent;\n          _context.next = 6;\n          return put({\n            type: MAKE_POST_SUCCESS,\n            result: {\n              body: Post.data.post,\n              nickname: Post.data.nickname,\n              date: Post.data.date,\n              title: Post.data.title,\n              _id: Post.data._id\n            }\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: MAKE_POST_FAILURE,\n            error: _context.t0.response\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchMakePost() {\n  return _regeneratorRuntime.wrap(function watchMakePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(MAKE_POST_REQUEST, makePost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction getPostsAPI() {\n  return axios.get(\"/posts\", {\n    withCredentials: true\n  });\n}\n\nfunction getPosts() {\n  var Posts;\n  return _regeneratorRuntime.wrap(function getPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(getPostsAPI);\n\n        case 3:\n          Posts = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: GET_POSTS_SUCCESS,\n            result: Posts.data.postLists\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: GET_POSTS_FAILURE,\n            error: _context3.t0.response\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchGetPosts() {\n  return _regeneratorRuntime.wrap(function watchGetPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(GET_POSTS_REQUEST, getPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction getPostAPI(data) {\n  var category = data.category,\n      title = data.title;\n  return axios.get(\"/post/\".concat(category, \"/\").concat(title));\n}\n\nfunction getPost(action) {\n  var Post;\n  return _regeneratorRuntime.wrap(function getPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(getPostAPI, action.payload);\n\n        case 3:\n          Post = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: GET_POST_SUCCESS,\n            result: Post.data.post\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: GET_POST_FAILURE,\n            error: _context5.t0.response\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchGetPost() {\n  return _regeneratorRuntime.wrap(function watchGetPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(GET_POST_REQUEST, getPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchMakePost), fork(watchGetPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["D:/webdev/web_blog/front/sagas/post.ts"],"names":["makePost","watchMakePost","getPosts","watchGetPosts","getPost","watchGetPost","postSaga","all","fork","takeLatest","put","call","MAKE_POST_REQUEST","MAKE_POST_SUCCESS","MAKE_POST_FAILURE","GET_POSTS_REQUEST","GET_POSTS_SUCCESS","GET_POSTS_FAILURE","GET_POST_REQUEST","GET_POST_FAILURE","GET_POST_SUCCESS","axios","makePostAPI","data","post","withCredentials","action","payload","Post","type","result","body","nickname","date","title","_id","console","error","response","getPostsAPI","get","Posts","postLists","getPostAPI","category"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\r\nimport {\r\n  MAKE_POST_REQUEST,\r\n  MAKE_POST_SUCCESS,\r\n  MAKE_POST_FAILURE,\r\n  GET_POSTS_REQUEST,\r\n  GET_POSTS_SUCCESS,\r\n  GET_POSTS_FAILURE,\r\n  GET_POST_REQUEST,\r\n  GET_POST_FAILURE,\r\n  GET_POST_SUCCESS\r\n} from \"../reducers/post/actions\";\r\nimport axios from \"axios\";\r\n\r\nfunction makePostAPI(data) {\r\n  return axios.post(\"/post\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* makePost(action) {\r\n  try {\r\n    const Post = yield call(makePostAPI, action.payload);\r\n    yield put({\r\n      type: MAKE_POST_SUCCESS,\r\n      result: {\r\n        body: Post.data.post,\r\n        nickname: Post.data.nickname,\r\n        date: Post.data.date,\r\n        title: Post.data.title,\r\n        _id: Post.data._id\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: MAKE_POST_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchMakePost() {\r\n  yield takeLatest(MAKE_POST_REQUEST, makePost);\r\n}\r\n\r\nfunction getPostsAPI() {\r\n  return axios.get(\"/posts\", {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* getPosts() {\r\n  try {\r\n    const Posts = yield call(getPostsAPI);\r\n    yield put({\r\n      type: GET_POSTS_SUCCESS,\r\n      result: Posts.data.postLists\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: GET_POSTS_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchGetPosts() {\r\n  yield takeLatest(GET_POSTS_REQUEST, getPosts);\r\n}\r\n\r\nfunction getPostAPI(data) {\r\n  const { category, title } = data;\r\n  return axios.get(`/post/${category}/${title}`);\r\n}\r\n\r\nfunction* getPost(action) {\r\n  try {\r\n    const Post = yield call(getPostAPI, action.payload);\r\n    yield put({\r\n      type: GET_POST_SUCCESS,\r\n      result: Post.data.post\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: GET_POST_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchGetPost() {\r\n  yield takeLatest(GET_POST_REQUEST, getPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchMakePost), fork(watchGetPosts)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}