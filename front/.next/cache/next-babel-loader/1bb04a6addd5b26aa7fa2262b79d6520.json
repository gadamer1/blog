{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user/actions\"; // 회원가입 요청\n\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data, {\n    withCredentials: true\n  });\n}\n\nfunction signUp(action) {\n  var User;\n  return _regeneratorRuntime.wrap(function signUp$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(signUpAPI, action.payload);\n\n        case 3:\n          User = _context.sent;\n          _context.next = 6;\n          return put({\n            type: SIGN_UP_SUCCESS,\n            result: User.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context.t0.status\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // 로그인 요청\n\n\nfunction loginAPI(data) {\n  return axios.post(\"/user/login\", data, {\n    withCredentials: true\n  });\n}\n\nfunction login(action) {\n  var User;\n  return _regeneratorRuntime.wrap(function login$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loginAPI, action.payload);\n\n        case 3:\n          User = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOGIN_SUCCESS,\n            result: User.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOGIN_FAILURE,\n            error: _context3.t0.msg\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOGIN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["D:/webdev/web_blog/front/sagas/user.ts"],"names":["signUp","watchSignUp","login","watchLogin","userSaga","all","fork","put","takeLatest","call","axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","signUpAPI","data","post","withCredentials","action","payload","User","type","result","console","error","status","loginAPI","log","msg"],"mappings":";;;;yBAsBUA,M;;;yBAgBAC,W;;;yBAWAC,K;;;yBAgBAC,U;;;yBAIeC,Q;;AArEzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAKA,SACEC,aADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAOO,0BAPP,C,CASA;;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,SAAOR,KAAK,CAACS,IAAN,CAAW,OAAX,EAAoBD,IAApB,EAA0B;AAC/BE,IAAAA,eAAe,EAAE;AADc,GAA1B,CAAP;AAGD;;AAED,SAAUpB,MAAV,CAAiBqB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMZ,IAAI,CAACQ,SAAD,EAAYI,MAAM,CAACC,OAAnB,CAAV;;AAFjB;AAEUC,UAAAA,IAFV;AAAA;AAGI,iBAAMhB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAET,eADE;AAERU,YAAAA,MAAM,EAAEF,IAAI,CAACL;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIQ,UAAAA,OAAO,CAACC,KAAR;AARJ;AASI,iBAAMpB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAER,eADE;AAERW,YAAAA,KAAK,EAAE,YAAEC;AAFD,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAU3B,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACM,eAAD,EAAkBd,MAAlB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AACA,SAAS6B,QAAT,CAAkBX,IAAlB,EAAwB;AACtB,SAAOR,KAAK,CAACS,IAAN,CAAW,aAAX,EAA0BD,IAA1B,EAAgC;AACrCE,IAAAA,eAAe,EAAE;AADoB,GAAhC,CAAP;AAGD;;AAED,SAAUlB,KAAV,CAAgBmB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMZ,IAAI,CAACoB,QAAD,EAAWR,MAAM,CAACC,OAAlB,CAAV;;AAFjB;AAEUC,UAAAA,IAFV;AAAA;AAGI,iBAAMhB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEZ,aADE;AAERa,YAAAA,MAAM,EAAEF,IAAI,CAACL;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIQ,UAAAA,OAAO,CAACI,GAAR;AARJ;AASI,iBAAMvB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEX,aADE;AAERc,YAAAA,KAAK,EAAE,aAAEI;AAFD,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAU5B,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAACG,aAAD,EAAgBT,KAAhB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,UAAD,CAAL,EAAmBG,IAAI,CAACL,WAAD,CAAvB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  loginRequestAction,\r\n  signUpRequsetAction\r\n} from \"../reducers/user/interfaces\";\r\nimport {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE\r\n} from \"../reducers/user/actions\";\r\n\r\n// 회원가입 요청\r\nfunction signUpAPI(data) {\r\n  return axios.post(\"/user\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* signUp(action: signUpRequsetAction) {\r\n  try {\r\n    const User = yield call(signUpAPI, action.payload);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      result: User.data\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e.status\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n// 로그인 요청\r\nfunction loginAPI(data) {\r\n  return axios.post(\"/user/login\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* login(action: loginRequestAction) {\r\n  try {\r\n    const User = yield call(loginAPI, action.payload);\r\n    yield put({\r\n      type: LOGIN_SUCCESS,\r\n      result: User.data\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: LOGIN_FAILURE,\r\n      error: e.msg\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOGIN_REQUEST, login);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchSignUp)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}