{"ast":null,"code":"import { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE } from \"../reducers/user/actions\";\n\nfunction loginAPI(data) {\n  return axios.post(\"/user\", data, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const User = yield call(loginAPI, action.payload);\n    yield put({\n      type: LOGIN_SUCCESS,\n      result: User.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOGIN_FAILURE,\n      result: e.status\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}","map":{"version":3,"sources":["D:/webdev/web_blog/front/sagas/user.ts"],"names":["all","fork","put","takeLatest","call","axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","loginAPI","data","post","withCredentials","login","action","User","payload","type","result","e","console","error","status","watchLogin","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,aADF,EAEEC,aAFF,EAGEC,aAHF,QAIO,0BAJP;;AAMA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOL,KAAK,CAACM,IAAN,CAAW,OAAX,EAAoBD,IAApB,EAA0B;AAC/BE,IAAAA,eAAe,EAAE;AADc,GAA1B,CAAP;AAGD;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAA4C;AAC1C,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMX,IAAI,CAACK,QAAD,EAAWK,MAAM,CAACE,OAAlB,CAAvB;AACA,UAAMd,GAAG,CAAC;AACRe,MAAAA,IAAI,EAAEV,aADE;AAERW,MAAAA,MAAM,EAAEH,IAAI,CAACL;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOS,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMjB,GAAG,CAAC;AACRe,MAAAA,IAAI,EAAET,aADE;AAERU,MAAAA,MAAM,EAAEC,CAAC,CAACG;AAFF,KAAD,CAAT;AAID;AACF;;AAED,UAAUC,UAAV,GAAuB;AACrB,QAAMpB,UAAU,CAACG,aAAD,EAAgBO,KAAhB,CAAhB;AACD;;AAED,eAAe,UAAUW,QAAV,GAAqB;AAClC,QAAMxB,GAAG,CAAC,CAACC,IAAI,CAACsB,UAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport { loginRequestAction } from \"../reducers/user/types\";\r\nimport {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE\r\n} from \"../reducers/user/actions\";\r\n\r\nfunction loginAPI(data) {\r\n  return axios.post(\"/user\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* login(action: loginRequestAction) {\r\n  try {\r\n    const User = yield call(loginAPI, action.payload);\r\n    yield put({\r\n      type: LOGIN_SUCCESS,\r\n      result: User.data\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOGIN_FAILURE,\r\n      result: e.status\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOGIN_REQUEST, login);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}