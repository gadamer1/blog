{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\blog\\\\front\\\\pages\\\\post\\\\[category]\\\\[title].tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { FETCH_POST_REQUEST } from \"../../../reducers/post/actions\";\nimport Renderer from \"../../../Components/draft/Renderer\";\n\nconst Post = () => {\n  const {\n    currentPost\n  } = useSelector(state => state.post);\n  const {\n    isPostLoading\n  } = useSelector(state => state.post.loadingStates);\n\n  if (isPostLoading) {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"\\uB85C\\uB529\\uC911 \\uC785\\uB2C8\\uB2E4!\"));\n  } else {\n    return __jsx(React.Fragment, null, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, currentPost.title), __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, currentPost.nickname), __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, currentPost.Date), currentPost && __jsx(Renderer, {\n      raw: JSON.parse(currentPost.body),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }));\n  }\n};\n\nPost.getInitialProps = ctx => {\n  const {\n    title,\n    category\n  } = ctx.query;\n  ctx.store.dispatch({\n    type: FETCH_POST_REQUEST,\n    payload: {\n      title,\n      category\n    }\n  });\n  return {};\n};\n\nexport default Post;","map":{"version":3,"sources":["D:/webdev/blog/front/pages/post/[category]/[title].tsx"],"names":["React","useSelector","FETCH_POST_REQUEST","Renderer","Post","currentPost","state","post","isPostLoading","loadingStates","title","nickname","Date","JSON","parse","body","getInitialProps","ctx","category","query","store","dispatch","type","payload"],"mappings":";;AAAA,OAAOA,KAAP,MAA0C,OAA1C;AAGA,SAASC,WAAT,QAAyC,aAAzC;AACA,SAEEC,kBAFF,QAGO,gCAHP;AAKA,OAAOC,QAAP,MAAqB,oCAArB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAAkBJ,WAAW,CAAEK,KAAD,IAAkBA,KAAK,CAACC,IAAzB,CAAnC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAoBP,WAAW,CAClCK,KAAD,IAAkBA,KAAK,CAACC,IAAN,CAAWE,aADM,CAArC;;AAGA,MAAID,aAAJ,EAAmB;AACjB,WACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADF,CADF;AAKD,GAND,MAMO;AACL,WACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKH,WAAW,CAACK,KAAjB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKL,WAAW,CAACM,QAAjB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKN,WAAW,CAACO,IAAjB,CAHF,EAIGP,WAAW,IAAI,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEQ,IAAI,CAACC,KAAL,CAAWT,WAAW,CAACU,IAAvB,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJlB,CADF;AAQD;AACF,CArBD;;AAuBAX,IAAI,CAACY,eAAL,GAAuBC,GAAG,IAAI;AAC5B,QAAM;AAAEP,IAAAA,KAAF;AAASQ,IAAAA;AAAT,MAAsBD,GAAG,CAACE,KAAhC;AAEAF,EAAAA,GAAG,CAACG,KAAJ,CAAUC,QAAV,CAAmB;AACjBC,IAAAA,IAAI,EAAEpB,kBADW;AAEjBqB,IAAAA,OAAO,EAAE;AACPb,MAAAA,KADO;AAEPQ,MAAAA;AAFO;AAFQ,GAAnB;AAOA,SAAO,EAAP;AACD,CAXD;;AAaA,eAAed,IAAf","sourcesContent":["import React, { useEffect, Context } from \"react\";\r\n\r\nimport { useRouter } from \"next/router\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  GET_POST_REQUEST,\r\n  FETCH_POST_REQUEST\r\n} from \"../../../reducers/post/actions\";\r\nimport { store } from \"../../../reducers/types\";\r\nimport Renderer from \"../../../Components/draft/Renderer\";\r\n\r\nconst Post = () => {\r\n  const { currentPost } = useSelector((state: store) => state.post);\r\n  const { isPostLoading } = useSelector(\r\n    (state: store) => state.post.loadingStates\r\n  );\r\n  if (isPostLoading) {\r\n    return (\r\n      <>\r\n        <div>로딩중 입니다!</div>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <h1>{currentPost.title}</h1>\r\n        <h1>{currentPost.nickname}</h1>\r\n        <h1>{currentPost.Date}</h1>\r\n        {currentPost && <Renderer raw={JSON.parse(currentPost.body)} />}\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nPost.getInitialProps = ctx => {\r\n  const { title, category } = ctx.query;\r\n\r\n  ctx.store.dispatch({\r\n    type: FETCH_POST_REQUEST,\r\n    payload: {\r\n      title,\r\n      category\r\n    }\r\n  });\r\n  return {};\r\n};\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}