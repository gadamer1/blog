{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\blog\\\\front\\\\pages\\\\post\\\\[category]\\\\[title].tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FETCH_POST_REQUEST, DELETE_POST_REQUEST } from \"../../../reducers/post/actions\";\nimport { Grid, Typography, Chip, Button } from \"@material-ui/core\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport { Face as FaceIcon } from \"@material-ui/icons\";\nimport Router from \"next/router\";\nimport Breadcrumb from \"../../../Components/BreadCrumb\";\nimport CustomMarkdown from \"../../../Components/CustomMarkdown\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    width: \"80%\",\n    backgroundColor: theme.palette.background.paper,\n    justifyContent: \"center\",\n    paddingLeft: \"20px\"\n  },\n  container: {\n    marginBottom: \"200px\"\n  },\n  title: {\n    border: \"1px solid black\"\n  }\n}));\n\nconst Post = () => {\n  const classes = useStyles({});\n  const dispatch = useDispatch();\n  const {\n    currentPost\n  } = useSelector(state => state.post);\n  const {\n    isPostLoading,\n    isPostDeleting,\n    isPostDeleteSuccess\n  } = useSelector(state => state.post.loadingStates);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    category,\n    title\n  } = useRouter().query;\n  useEffect(() => {\n    if (isPostDeleteSuccess) {\n      Router.push(`/post/${category}`);\n    }\n  }, [isPostDeleteSuccess]);\n\n  const _onClickNickname = nickname => () => {\n    Router.push(`/profile/${nickname}`);\n  };\n\n  const _onClickDeleteButton = e => {\n    e.preventDefault();\n    dispatch({\n      type: DELETE_POST_REQUEST,\n      payload: {\n        nickname: currentPost.nickname,\n        userId: me._id\n      }\n    });\n  };\n\n  if (isPostLoading) {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"\\uB85C\\uB529\\uC911 \\uC785\\uB2C8\\uB2E4!\"));\n  } else if (currentPost) {\n    return __jsx(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, __jsx(Breadcrumb, {\n      category: category,\n      title: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), __jsx(Grid, {\n      container: true,\n      className: classes.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, __jsx(Typography, {\n      variant: \"h5\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"\\uC81C\\uBAA9\", __jsx(Typography, {\n      variant: \"h4\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, currentPost.title))), __jsx(Grid, {\n      item: true,\n      xs: 6,\n      style: {\n        float: \"right\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, __jsx(Chip, {\n      icon: __jsx(FaceIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }),\n      onClick: _onClickNickname(currentPost.nickname),\n      label: currentPost.nickname,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), me && me._id === currentPost._id && __jsx(Button, {\n      color: \"secondary\",\n      onClick: _onClickDeleteButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), __jsx(Typography, {\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, currentPost.Date))), currentPost && __jsx(CustomMarkdown, {\n      source: currentPost.body,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }));\n  } else {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"\\uD3EC\\uC2A4\\uD2B8\\uAC00 \\uC874\\uC7AC\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4\");\n  }\n};\n\nPost.getInitialProps = ctx => {\n  const {\n    title,\n    category\n  } = ctx.query;\n  ctx.store.dispatch({\n    type: FETCH_POST_REQUEST,\n    payload: {\n      title,\n      category\n    }\n  });\n  return {};\n};\n\nexport default Post;","map":{"version":3,"sources":["D:/webdev/blog/front/pages/post/[category]/[title].tsx"],"names":["React","useEffect","useRouter","useSelector","useDispatch","FETCH_POST_REQUEST","DELETE_POST_REQUEST","Grid","Typography","Chip","Button","makeStyles","createStyles","Face","FaceIcon","Router","Breadcrumb","CustomMarkdown","useStyles","theme","root","width","backgroundColor","palette","background","paper","justifyContent","paddingLeft","container","marginBottom","title","border","Post","classes","dispatch","currentPost","state","post","isPostLoading","isPostDeleting","isPostDeleteSuccess","loadingStates","me","user","category","query","push","_onClickNickname","nickname","_onClickDeleteButton","e","preventDefault","type","payload","userId","_id","float","Date","body","getInitialProps","ctx","store"],"mappings":"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","sourcesContent":["import React, { useEffect, Context } from \"react\";\r\n\r\nimport { useRouter } from \"next/router\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  GET_POST_REQUEST,\r\n  FETCH_POST_REQUEST,\r\n  DELETE_POST_REQUEST\r\n} from \"../../../reducers/post/actions\";\r\nimport { store } from \"../../../reducers/types\";\r\nimport { Grid, Typography, Chip, Button } from \"@material-ui/core\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport { Face as FaceIcon } from \"@material-ui/icons\";\r\nimport Router from \"next/router\";\r\nimport Breadcrumb from \"../../../Components/BreadCrumb\";\r\nimport CustomMarkdown from \"../../../Components/CustomMarkdown\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"80%\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      justifyContent: \"center\",\r\n      paddingLeft: \"20px\"\r\n    },\r\n    container: {\r\n      marginBottom: \"200px\"\r\n    },\r\n    title: {\r\n      border: \"1px solid black\"\r\n    }\r\n  })\r\n);\r\n\r\nconst Post = () => {\r\n  const classes = useStyles({});\r\n  const dispatch = useDispatch();\r\n  const { currentPost } = useSelector((state: store) => state.post);\r\n  const { isPostLoading, isPostDeleting, isPostDeleteSuccess } = useSelector(\r\n    (state: store) => state.post.loadingStates\r\n  );\r\n  const { me } = useSelector((state: store) => state.user);\r\n  const { category, title } = useRouter().query;\r\n\r\n  useEffect(() => {\r\n    if (isPostDeleteSuccess) {\r\n      Router.push(`/post/${category}`);\r\n    }\r\n  }, [isPostDeleteSuccess]);\r\n\r\n  const _onClickNickname = nickname => () => {\r\n    Router.push(`/profile/${nickname}`);\r\n  };\r\n\r\n  const _onClickDeleteButton = e => {\r\n    e.preventDefault();\r\n    dispatch({\r\n      type: DELETE_POST_REQUEST,\r\n      payload: {\r\n        nickname: currentPost.nickname,\r\n        userId: me._id\r\n      }\r\n    });\r\n  };\r\n\r\n  if (isPostLoading) {\r\n    return (\r\n      <>\r\n        <div>로딩중 입니다!</div>\r\n      </>\r\n    );\r\n  } else if (currentPost) {\r\n    return (\r\n      <div className={classes.root}>\r\n        <Breadcrumb category={category} title={title} />\r\n        <Grid container className={classes.container}>\r\n          <Grid item xs={6}>\r\n            <Typography variant=\"h5\" color=\"secondary\">\r\n              제목\r\n              <Typography variant=\"h4\" color=\"primary\">\r\n                {currentPost.title}\r\n              </Typography>\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={6} style={{ float: \"right\" }}>\r\n            <Chip\r\n              icon={<FaceIcon />}\r\n              onClick={_onClickNickname(currentPost.nickname)}\r\n              label={currentPost.nickname}\r\n            />\r\n            {me && me._id === currentPost._id && (\r\n              <Button color=\"secondary\" onClick={_onClickDeleteButton} />\r\n            )}\r\n            <Typography color=\"textSecondary\">{currentPost.Date}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n        {currentPost && <CustomMarkdown source={currentPost.body} />}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div>포스트가 존재하지 않습니다</div>;\r\n  }\r\n};\r\n\r\nPost.getInitialProps = ctx => {\r\n  const { title, category } = ctx.query;\r\n\r\n  ctx.store.dispatch({\r\n    type: FETCH_POST_REQUEST,\r\n    payload: {\r\n      title,\r\n      category\r\n    }\r\n  });\r\n  return {};\r\n};\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}