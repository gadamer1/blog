{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\blog\\\\front\\\\pages\\\\post\\\\[category]\\\\[title].tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useSelector } from \"react-redux\";\nimport { FETCH_POST_REQUEST } from \"../../../reducers/post/actions\";\nimport { Grid, Typography, Chip } from \"@material-ui/core\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport { Face as FaceIcon } from \"@material-ui/icons\";\nimport Router from \"next/router\";\nimport Breadcrumb from \"../../../Components/BreadCrumb\";\nimport CustomMarkdown from \"../../../Components/CustomMarkdown\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      width: \"80%\",\n      backgroundColor: theme.palette.background.paper,\n      justifyContent: \"center\",\n      paddingLeft: \"20px\"\n    },\n    container: {\n      marginBottom: \"200px\"\n    },\n    title: {\n      border: \"1px solid black\"\n    }\n  });\n});\n\nvar Post = function Post() {\n  var classes = useStyles({});\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      currentPost = _useSelector.currentPost;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post.loadingStates;\n  }),\n      isPostLoading = _useSelector2.isPostLoading;\n\n  var _useRouter$query = useRouter().query,\n      category = _useRouter$query.category,\n      title = _useRouter$query.title;\n\n  var _onClickNickname = function _onClickNickname(nickname) {\n    return function () {\n      Router.push(\"/profile/\".concat(nickname));\n    };\n  };\n\n  if (isPostLoading) {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"\\uB85C\\uB529\\uC911 \\uC785\\uB2C8\\uB2E4!\"));\n  } else {\n    return __jsx(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, __jsx(Breadcrumb, {\n      category: category,\n      title: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), __jsx(Grid, {\n      container: true,\n      className: classes.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, __jsx(Typography, {\n      variant: \"h5\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"\\uC81C\\uBAA9\", __jsx(Typography, {\n      variant: \"h4\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, currentPost.title))), __jsx(Grid, {\n      item: true,\n      xs: 6,\n      style: {\n        \"float\": \"right\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, __jsx(Chip, {\n      icon: __jsx(FaceIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }),\n      onClick: _onClickNickname(currentPost.nickname),\n      label: currentPost.nickname,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), __jsx(Typography, {\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, currentPost.Date))), currentPost && __jsx(CustomMarkdown, {\n      source: currentPost.body,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }));\n  }\n};\n\nPost.getInitialProps = function (ctx) {\n  var _ctx$query = ctx.query,\n      title = _ctx$query.title,\n      category = _ctx$query.category;\n  ctx.store.dispatch({\n    type: FETCH_POST_REQUEST,\n    payload: {\n      title: title,\n      category: category\n    }\n  });\n  return {};\n};\n\nexport default Post;","map":{"version":3,"sources":["D:/webdev/blog/front/pages/post/[category]/[title].tsx"],"names":["React","useRouter","useSelector","FETCH_POST_REQUEST","Grid","Typography","Chip","makeStyles","createStyles","Face","FaceIcon","Router","Breadcrumb","CustomMarkdown","useStyles","theme","root","width","backgroundColor","palette","background","paper","justifyContent","paddingLeft","container","marginBottom","title","border","Post","classes","state","post","currentPost","loadingStates","isPostLoading","query","category","_onClickNickname","nickname","push","Date","body","getInitialProps","ctx","store","dispatch","type","payload"],"mappings":"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","sourcesContent":["import React, { useEffect, Context } from \"react\";\r\n\r\nimport { useRouter } from \"next/router\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  GET_POST_REQUEST,\r\n  FETCH_POST_REQUEST\r\n} from \"../../../reducers/post/actions\";\r\nimport { store } from \"../../../reducers/types\";\r\nimport Markdown from \"react-markdown\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Grid,\r\n  Typography,\r\n  Chip,\r\n  Breadcrumbs\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport { Face as FaceIcon } from \"@material-ui/icons\";\r\nimport Router from \"next/router\";\r\nimport Breadcrumb from \"../../../Components/BreadCrumb\";\r\nimport CustomMarkdown from \"../../../Components/CustomMarkdown\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"80%\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      justifyContent: \"center\",\r\n      paddingLeft: \"20px\"\r\n    },\r\n    container: {\r\n      marginBottom: \"200px\"\r\n    },\r\n    title: {\r\n      border: \"1px solid black\"\r\n    }\r\n  })\r\n);\r\n\r\nconst Post = () => {\r\n  const classes = useStyles({});\r\n  const { currentPost } = useSelector((state: store) => state.post);\r\n  const { isPostLoading } = useSelector(\r\n    (state: store) => state.post.loadingStates\r\n  );\r\n\r\n  const { category, title } = useRouter().query;\r\n\r\n  const _onClickNickname = nickname => () => {\r\n    Router.push(`/profile/${nickname}`);\r\n  };\r\n\r\n  if (isPostLoading) {\r\n    return (\r\n      <>\r\n        <div>로딩중 입니다!</div>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className={classes.root}>\r\n        <Breadcrumb category={category} title={title} />\r\n        <Grid container className={classes.container}>\r\n          <Grid item xs={6}>\r\n            <Typography variant=\"h5\" color=\"secondary\">\r\n              제목\r\n              <Typography variant=\"h4\" color=\"primary\">\r\n                {currentPost.title}\r\n              </Typography>\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={6} style={{ float: \"right\" }}>\r\n            <Chip\r\n              icon={<FaceIcon />}\r\n              onClick={_onClickNickname(currentPost.nickname)}\r\n              label={currentPost.nickname}\r\n            />\r\n            <Typography color=\"textSecondary\">{currentPost.Date}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {currentPost && <CustomMarkdown source={currentPost.body} />}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nPost.getInitialProps = ctx => {\r\n  const { title, category } = ctx.query;\r\n\r\n  ctx.store.dispatch({\r\n    type: FETCH_POST_REQUEST,\r\n    payload: {\r\n      title,\r\n      category\r\n    }\r\n  });\r\n  return {};\r\n};\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}