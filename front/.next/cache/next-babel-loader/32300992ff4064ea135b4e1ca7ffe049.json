{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(makePost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchMakePost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getPosts),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetPosts),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchPost),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchFetchPost),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deletePost),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchDeltePost),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport { MAKE_POST_REQUEST, MAKE_POST_SUCCESS, MAKE_POST_FAILURE, GET_POSTS_REQUEST, GET_POSTS_SUCCESS, GET_POSTS_FAILURE, FETCH_POST_FAILURE, FETCH_POST_SUCCESS, FETCH_POST_REQUEST, DELETE_POST_REQUEST } from \"../reducers/post/actions\";\nimport axios from \"axios\";\n\nfunction makePostAPI(data) {\n  return axios.post(\"/post\", data, {\n    withCredentials: true\n  });\n}\n\nfunction makePost(action) {\n  var Post;\n  return _regeneratorRuntime.wrap(function makePost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(makePostAPI, action.payload);\n\n        case 3:\n          Post = _context.sent;\n          _context.next = 6;\n          return put({\n            type: MAKE_POST_SUCCESS,\n            result: {\n              body: Post.data.post,\n              nickname: Post.data.nickname,\n              date: Post.data.date,\n              title: Post.data.title,\n              _id: Post.data._id\n            }\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: MAKE_POST_FAILURE,\n            error: _context.t0.response\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchMakePost() {\n  return _regeneratorRuntime.wrap(function watchMakePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(MAKE_POST_REQUEST, makePost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction getPostsAPI(data) {\n  if (data) {\n    var category = data.category;\n    return axios.get(\"/posts/category/\".concat(category));\n  } else {\n    return axios.get(\"/posts\", {\n      withCredentials: true\n    });\n  }\n}\n\nfunction getPosts(action) {\n  var Posts;\n  return _regeneratorRuntime.wrap(function getPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(getPostsAPI, action.payload);\n\n        case 3:\n          Posts = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: GET_POSTS_SUCCESS,\n            result: Posts.data.postList\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: GET_POSTS_FAILURE,\n            error: _context3.t0.response\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchGetPosts() {\n  return _regeneratorRuntime.wrap(function watchGetPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(GET_POSTS_REQUEST, getPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction fetchPostAPI(data) {\n  return axios.post(\"/post/category/title\", data, {\n    withCredentials: true\n  });\n}\n\nfunction fetchPost(action) {\n  var Post;\n  return _regeneratorRuntime.wrap(function fetchPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(fetchPostAPI, action.payload);\n\n        case 3:\n          Post = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: FETCH_POST_SUCCESS,\n            result: Post.data.post\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: FETCH_POST_FAILURE,\n            error: _context5.t0.response\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchFetchPost() {\n  return _regeneratorRuntime.wrap(function watchFetchPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(FETCH_POST_REQUEST, fetchPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction deletePostAPI(data) {\n  return axios[\"delete\"](\"/post?userId=\".concat(data.userId, \"&postId=\").concat(data.postId));\n}\n\nfunction deletePost(action) {\n  var Post;\n  return _regeneratorRuntime.wrap(function deletePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(deletePostAPI, action.payload);\n\n        case 3:\n          Post = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: FETCH_POST_SUCCESS,\n            result: Post.data.post\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: FETCH_POST_FAILURE,\n            error: _context7.t0.response\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchDeltePost() {\n  return _regeneratorRuntime.wrap(function watchDeltePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(DELETE_POST_REQUEST, deletePost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchMakePost), fork(watchGetPosts), fork(watchFetchPost), fork(watchDeltePost)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["D:/webdev/blog/front/sagas/post.ts"],"names":["makePost","watchMakePost","getPosts","watchGetPosts","fetchPost","watchFetchPost","deletePost","watchDeltePost","postSaga","all","fork","takeLatest","put","call","MAKE_POST_REQUEST","MAKE_POST_SUCCESS","MAKE_POST_FAILURE","GET_POSTS_REQUEST","GET_POSTS_SUCCESS","GET_POSTS_FAILURE","FETCH_POST_FAILURE","FETCH_POST_SUCCESS","FETCH_POST_REQUEST","DELETE_POST_REQUEST","axios","makePostAPI","data","post","withCredentials","action","payload","Post","type","result","body","nickname","date","title","_id","console","error","response","getPostsAPI","category","get","Posts","postList","fetchPostAPI","deletePostAPI","userId","postId"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\r\nimport {\r\n  MAKE_POST_REQUEST,\r\n  MAKE_POST_SUCCESS,\r\n  MAKE_POST_FAILURE,\r\n  GET_POSTS_REQUEST,\r\n  GET_POSTS_SUCCESS,\r\n  GET_POSTS_FAILURE,\r\n  GET_POST_REQUEST,\r\n  GET_POST_FAILURE,\r\n  GET_POST_SUCCESS,\r\n  FETCH_POST_FAILURE,\r\n  FETCH_POST_SUCCESS,\r\n  FETCH_POST_REQUEST,\r\n  DELETE_POST_REQUEST\r\n} from \"../reducers/post/actions\";\r\nimport axios from \"axios\";\r\n\r\nfunction makePostAPI(data) {\r\n  return axios.post(\"/post\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* makePost(action) {\r\n  try {\r\n    const Post = yield call(makePostAPI, action.payload);\r\n    yield put({\r\n      type: MAKE_POST_SUCCESS,\r\n      result: {\r\n        body: Post.data.post,\r\n        nickname: Post.data.nickname,\r\n        date: Post.data.date,\r\n        title: Post.data.title,\r\n        _id: Post.data._id\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: MAKE_POST_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchMakePost() {\r\n  yield takeLatest(MAKE_POST_REQUEST, makePost);\r\n}\r\n\r\nfunction getPostsAPI(data) {\r\n  if (data) {\r\n    const { category } = data;\r\n    return axios.get(`/posts/category/${category}`);\r\n  } else {\r\n    return axios.get(\"/posts\", {\r\n      withCredentials: true\r\n    });\r\n  }\r\n}\r\n\r\nfunction* getPosts(action) {\r\n  try {\r\n    const Posts = yield call(getPostsAPI, action.payload);\r\n    yield put({\r\n      type: GET_POSTS_SUCCESS,\r\n      result: Posts.data.postList\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: GET_POSTS_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchGetPosts() {\r\n  yield takeLatest(GET_POSTS_REQUEST, getPosts);\r\n}\r\n\r\nfunction fetchPostAPI(data) {\r\n  return axios.post(`/post/category/title`, data, { withCredentials: true });\r\n}\r\n\r\nfunction* fetchPost(action) {\r\n  try {\r\n    const Post = yield call(fetchPostAPI, action.payload);\r\n    yield put({\r\n      type: FETCH_POST_SUCCESS,\r\n      result: Post.data.post\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: FETCH_POST_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchFetchPost() {\r\n  yield takeLatest(FETCH_POST_REQUEST, fetchPost);\r\n}\r\n\r\nfunction deletePostAPI(data) {\r\n  return axios.delete(`/post?userId=${data.userId}&postId=${data.postId}`);\r\n}\r\n\r\nfunction* deletePost(action) {\r\n  try {\r\n    const Post = yield call(deletePostAPI, action.payload);\r\n    yield put({\r\n      type: FETCH_POST_SUCCESS,\r\n      result: Post.data.post\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: FETCH_POST_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchDeltePost() {\r\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchMakePost),\r\n    fork(watchGetPosts),\r\n    fork(watchFetchPost),\r\n    fork(watchDeltePost)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}