{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport Head from \"next/head\";\nimport withRedux from \"next-redux-wrapper\";\nimport withReduxSaga from \"next-redux-saga\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\";\nimport reducer from \"../reducers\";\nimport rootSaga from \"../sagas\";\nimport AppLayout from \"../Layouts/AppLayout\";\nimport axios from \"axios\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user/actions\";\n\nconst Blog = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  // for material ui ssr\n  useEffect(() => {\n    const jssStyles = document.querySelector(\"#jss-server-side\");\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }, []);\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Head, null, __jsx(\"title\", null, \"\\uAC00\\uB2E4\\uBA38\\uC758 \\uBE14\\uB85C\\uADF8\")), __jsx(AppLayout, null, __jsx(Component, pageProps)));\n};\n\nBlog.getInitialProps = async context => {\n  let pageProps = {};\n  const {\n    ctx,\n    Component\n  } = context;\n  const state = ctx.store.getState();\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : \"\";\n\n  if (ctx.isServer && cookie) {\n    axios.defaults.headers.cookie = cookie;\n  }\n\n  if (!state.user.user && cookie) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n}; // FOR REDUX DEVTOOLS EXTENSION\n\n\nconst configureStore = initialState => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const composeEnhancer = composeWithDevTools({// options like actionSanitizer, stateSanitizer\n  });\n  const enhancer = composeEnhancer(applyMiddleware(...middlewares));\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(Blog));","map":null,"metadata":{},"sourceType":"module"}