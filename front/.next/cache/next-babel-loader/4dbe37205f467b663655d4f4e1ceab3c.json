{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\blog\\\\front\\\\pages\\\\post\\\\[category].tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useSelector } from \"react-redux\";\nimport { GET_POSTS_REQUEST } from \"../../reducers/post/actions\";\nimport { Link, Grid, Typography, Divider, Paper } from \"@material-ui/core\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: \"auto\",\n    maxWidth: 500,\n    textDecoration: \"none\"\n  },\n  image: {\n    width: 128,\n    height: 128\n  },\n  img: {\n    margin: \"auto\",\n    display: \"block\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\"\n  }\n}));\n\nconst Post = () => {\n  const {\n    posts\n  } = useSelector(state => state.post);\n  const router = useRouter();\n  const {\n    category\n  } = router.query;\n  const classes = useStyles({});\n  return __jsx(React.Fragment, null, __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    spacing: 3,\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h1\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, category)), __jsx(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), posts && posts.map(post => {\n    return __jsx(React.Fragment, null, __jsx(Link, {\n      href: `/post/${category}/${post.title}`,\n      key: post._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, __jsx(Grid, {\n      key: post._id,\n      item: true,\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, __jsx(Paper, {\n      className: classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, __jsx(Typography, {\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, post.title), __jsx(Typography, {\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, post.nickname), __jsx(Typography, {\n      variant: \"inherit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, post.Date)))));\n  })));\n};\n\nPost.getInitialProps = async ctx => {\n  const {\n    category\n  } = ctx.query;\n  ctx.store.dispatch({\n    type: GET_POSTS_REQUEST,\n    payload: {\n      category\n    }\n  });\n};\n\nexport default Post;","map":{"version":3,"sources":["D:/webdev/blog/front/pages/post/[category].tsx"],"names":["React","useRouter","useSelector","GET_POSTS_REQUEST","Link","Grid","Typography","Divider","Paper","makeStyles","createStyles","useStyles","theme","root","flexGrow","paper","padding","spacing","margin","maxWidth","textDecoration","image","width","height","img","display","maxHeight","Post","posts","state","post","router","category","query","classes","map","title","_id","nickname","Date","getInitialProps","ctx","store","dispatch","type","payload"],"mappings":"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","sourcesContent":["import React, { useEffect, Context } from \"react\";\r\nimport { NextPage, NextPageContext } from \"next\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { GET_POSTS_REQUEST } from \"../../reducers/post/actions\";\r\nimport { store } from \"../../reducers/types\";\r\nimport { Link, Grid, Typography, Divider, Paper } from \"@material-ui/core\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      margin: \"auto\",\r\n      maxWidth: 500,\r\n      textDecoration: \"none\"\r\n    },\r\n    image: {\r\n      width: 128,\r\n      height: 128\r\n    },\r\n    img: {\r\n      margin: \"auto\",\r\n      display: \"block\",\r\n      maxWidth: \"100%\",\r\n      maxHeight: \"100%\"\r\n    }\r\n  })\r\n);\r\n\r\nconst Post = () => {\r\n  const { posts } = useSelector((state: store) => state.post);\r\n  const router = useRouter();\r\n  const { category } = router.query;\r\n\r\n  const classes = useStyles({});\r\n\r\n  return (\r\n    <>\r\n      <Grid container justify=\"center\" spacing={3} className={classes.root}>\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"h1\" color=\"primary\">\r\n            {category}\r\n          </Typography>\r\n        </Grid>\r\n        <Divider />\r\n        {posts &&\r\n          posts.map(post => {\r\n            return (\r\n              <>\r\n                <Link href={`/post/${category}/${post.title}`} key={post._id}>\r\n                  <Grid key={post._id} item xs={6}>\r\n                    <Paper className={classes.paper}>\r\n                      <Typography variant=\"h5\">{post.title}</Typography>\r\n                      <Typography variant=\"h6\">{post.nickname}</Typography>\r\n                      <Typography variant=\"inherit\">{post.Date}</Typography>\r\n                    </Paper>\r\n                  </Grid>\r\n                </Link>\r\n              </>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nPost.getInitialProps = async ctx => {\r\n  const { category } = ctx.query;\r\n  ctx.store.dispatch({\r\n    type: GET_POSTS_REQUEST,\r\n    payload: { category }\r\n  });\r\n};\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}