{"ast":null,"code":"import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport { MAKE_POST_REQUEST, MAKE_POST_SUCCESS, MAKE_POST_FAILURE, GET_POSTS_REQUEST, GET_POSTS_SUCCESS, GET_POSTS_FAILURE, FETCH_POST_FAILURE, FETCH_POST_SUCCESS, FETCH_POST_REQUEST } from \"../reducers/post/actions\";\nimport axios from \"axios\";\n\nfunction makePostAPI(data) {\n  return axios.post(\"/post\", data, {\n    withCredentials: true\n  });\n}\n\nfunction* makePost(action) {\n  try {\n    const Post = yield call(makePostAPI, action.payload);\n    yield put({\n      type: MAKE_POST_SUCCESS,\n      result: {\n        body: Post.data.post,\n        nickname: Post.data.nickname,\n        date: Post.data.date,\n        title: Post.data.title,\n        _id: Post.data._id\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: MAKE_POST_FAILURE,\n      error: e.response\n    });\n  }\n}\n\nfunction* watchMakePost() {\n  yield takeLatest(MAKE_POST_REQUEST, makePost);\n}\n\nfunction getPostsAPI(data) {\n  if (data) {\n    const {\n      category\n    } = data;\n    return axios.get(`/posts/category/${category}`);\n  } else {\n    return axios.get(\"/posts\", {\n      withCredentials: true\n    });\n  }\n}\n\nfunction* getPosts(action) {\n  try {\n    const Posts = yield call(getPostsAPI, action.payload);\n    yield put({\n      type: GET_POSTS_SUCCESS,\n      result: Posts.data.postList\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: GET_POSTS_FAILURE,\n      error: e.response\n    });\n  }\n}\n\nfunction* watchGetPosts() {\n  yield takeLatest(GET_POSTS_REQUEST, getPosts);\n}\n\nfunction fetchPostAPI(data) {\n  return axios.post(`/post/category/title`, data, {\n    withCredentials: true\n  });\n}\n\nfunction* fetchPost(action) {\n  try {\n    const Post = yield call(fetchPostAPI, action.payload);\n    yield put({\n      type: FETCH_POST_SUCCESS,\n      result: Post.data.post\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: FETCH_POST_FAILURE,\n      error: e.response\n    });\n  }\n}\n\nfunction* watchFetchPost() {\n  yield takeLatest(FETCH_POST_REQUEST, fetchPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchMakePost), fork(watchGetPosts), fork(watchFetchPost)]);\n}","map":{"version":3,"sources":["D:/webdev/web_blog/front/sagas/post.ts"],"names":["all","fork","takeLatest","put","call","MAKE_POST_REQUEST","MAKE_POST_SUCCESS","MAKE_POST_FAILURE","GET_POSTS_REQUEST","GET_POSTS_SUCCESS","GET_POSTS_FAILURE","FETCH_POST_FAILURE","FETCH_POST_SUCCESS","FETCH_POST_REQUEST","axios","makePostAPI","data","post","withCredentials","makePost","action","Post","payload","type","result","body","nickname","date","title","_id","e","console","error","response","watchMakePost","getPostsAPI","category","get","getPosts","Posts","postList","watchGetPosts","fetchPostAPI","fetchPost","watchFetchPost","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,iBAJF,EAKEC,iBALF,EAMEC,iBANF,EAUEC,kBAVF,EAWEC,kBAXF,EAYEC,kBAZF,QAaO,0BAbP;AAcA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,SAAOF,KAAK,CAACG,IAAN,CAAW,OAAX,EAAoBD,IAApB,EAA0B;AAC/BE,IAAAA,eAAe,EAAE;AADc,GAA1B,CAAP;AAGD;;AAED,UAAUC,QAAV,CAAmBC,MAAnB,EAA2B;AACzB,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMjB,IAAI,CAACW,WAAD,EAAcK,MAAM,CAACE,OAArB,CAAvB;AACA,UAAMnB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEjB,iBADE;AAERkB,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAEJ,IAAI,CAACL,IAAL,CAAUC,IADV;AAENS,QAAAA,QAAQ,EAAEL,IAAI,CAACL,IAAL,CAAUU,QAFd;AAGNC,QAAAA,IAAI,EAAEN,IAAI,CAACL,IAAL,CAAUW,IAHV;AAINC,QAAAA,KAAK,EAAEP,IAAI,CAACL,IAAL,CAAUY,KAJX;AAKNC,QAAAA,GAAG,EAAER,IAAI,CAACL,IAAL,CAAUa;AALT;AAFA,KAAD,CAAT;AAUD,GAZD,CAYE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAM3B,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEhB,iBADE;AAERyB,MAAAA,KAAK,EAAEF,CAAC,CAACG;AAFD,KAAD,CAAT;AAID;AACF;;AAED,UAAUC,aAAV,GAA0B;AACxB,QAAMhC,UAAU,CAACG,iBAAD,EAAoBc,QAApB,CAAhB;AACD;;AAED,SAASgB,WAAT,CAAqBnB,IAArB,EAA2B;AACzB,MAAIA,IAAJ,EAAU;AACR,UAAM;AAAEoB,MAAAA;AAAF,QAAepB,IAArB;AACA,WAAOF,KAAK,CAACuB,GAAN,CAAW,mBAAkBD,QAAS,EAAtC,CAAP;AACD,GAHD,MAGO;AACL,WAAOtB,KAAK,CAACuB,GAAN,CAAU,QAAV,EAAoB;AACzBnB,MAAAA,eAAe,EAAE;AADQ,KAApB,CAAP;AAGD;AACF;;AAED,UAAUoB,QAAV,CAAmBlB,MAAnB,EAA2B;AACzB,MAAI;AACF,UAAMmB,KAAK,GAAG,MAAMnC,IAAI,CAAC+B,WAAD,EAAcf,MAAM,CAACE,OAArB,CAAxB;AACA,UAAMnB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEd,iBADE;AAERe,MAAAA,MAAM,EAAEe,KAAK,CAACvB,IAAN,CAAWwB;AAFX,KAAD,CAAT;AAID,GAND,CAME,OAAOV,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAM3B,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEb,iBADE;AAERsB,MAAAA,KAAK,EAAEF,CAAC,CAACG;AAFD,KAAD,CAAT;AAID;AACF;;AAED,UAAUQ,aAAV,GAA0B;AACxB,QAAMvC,UAAU,CAACM,iBAAD,EAAoB8B,QAApB,CAAhB;AACD;;AAED,SAASI,YAAT,CAAsB1B,IAAtB,EAA4B;AAC1B,SAAOF,KAAK,CAACG,IAAN,CAAY,sBAAZ,EAAmCD,IAAnC,EAAyC;AAAEE,IAAAA,eAAe,EAAE;AAAnB,GAAzC,CAAP;AACD;;AAED,UAAUyB,SAAV,CAAoBvB,MAApB,EAA4B;AAC1B,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMjB,IAAI,CAACsC,YAAD,EAAetB,MAAM,CAACE,OAAtB,CAAvB;AACA,UAAMnB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEX,kBADE;AAERY,MAAAA,MAAM,EAAEH,IAAI,CAACL,IAAL,CAAUC;AAFV,KAAD,CAAT;AAID,GAND,CAME,OAAOa,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAM3B,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEZ,kBADE;AAERqB,MAAAA,KAAK,EAAEF,CAAC,CAACG;AAFD,KAAD,CAAT;AAID;AACF;;AAED,UAAUW,cAAV,GAA2B;AACzB,QAAM1C,UAAU,CAACW,kBAAD,EAAqB8B,SAArB,CAAhB;AACD;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAClC,QAAM7C,GAAG,CAAC,CAACC,IAAI,CAACiC,aAAD,CAAL,EAAsBjC,IAAI,CAACwC,aAAD,CAA1B,EAA2CxC,IAAI,CAAC2C,cAAD,CAA/C,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\r\nimport {\r\n  MAKE_POST_REQUEST,\r\n  MAKE_POST_SUCCESS,\r\n  MAKE_POST_FAILURE,\r\n  GET_POSTS_REQUEST,\r\n  GET_POSTS_SUCCESS,\r\n  GET_POSTS_FAILURE,\r\n  GET_POST_REQUEST,\r\n  GET_POST_FAILURE,\r\n  GET_POST_SUCCESS,\r\n  FETCH_POST_FAILURE,\r\n  FETCH_POST_SUCCESS,\r\n  FETCH_POST_REQUEST\r\n} from \"../reducers/post/actions\";\r\nimport axios from \"axios\";\r\n\r\nfunction makePostAPI(data) {\r\n  return axios.post(\"/post\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* makePost(action) {\r\n  try {\r\n    const Post = yield call(makePostAPI, action.payload);\r\n    yield put({\r\n      type: MAKE_POST_SUCCESS,\r\n      result: {\r\n        body: Post.data.post,\r\n        nickname: Post.data.nickname,\r\n        date: Post.data.date,\r\n        title: Post.data.title,\r\n        _id: Post.data._id\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: MAKE_POST_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchMakePost() {\r\n  yield takeLatest(MAKE_POST_REQUEST, makePost);\r\n}\r\n\r\nfunction getPostsAPI(data) {\r\n  if (data) {\r\n    const { category } = data;\r\n    return axios.get(`/posts/category/${category}`);\r\n  } else {\r\n    return axios.get(\"/posts\", {\r\n      withCredentials: true\r\n    });\r\n  }\r\n}\r\n\r\nfunction* getPosts(action) {\r\n  try {\r\n    const Posts = yield call(getPostsAPI, action.payload);\r\n    yield put({\r\n      type: GET_POSTS_SUCCESS,\r\n      result: Posts.data.postList\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: GET_POSTS_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchGetPosts() {\r\n  yield takeLatest(GET_POSTS_REQUEST, getPosts);\r\n}\r\n\r\nfunction fetchPostAPI(data) {\r\n  return axios.post(`/post/category/title`, data, { withCredentials: true });\r\n}\r\n\r\nfunction* fetchPost(action) {\r\n  try {\r\n    const Post = yield call(fetchPostAPI, action.payload);\r\n    yield put({\r\n      type: FETCH_POST_SUCCESS,\r\n      result: Post.data.post\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: FETCH_POST_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchFetchPost() {\r\n  yield takeLatest(FETCH_POST_REQUEST, fetchPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchMakePost), fork(watchGetPosts), fork(watchFetchPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}