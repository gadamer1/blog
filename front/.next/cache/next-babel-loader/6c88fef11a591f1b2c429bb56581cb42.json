{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(makePost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchMakePost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport { MAKE_POST_REQUEST, MAKE_POST_SUCCESS, MAKE_POST_FAILURE } from \"../reducers/post/actions\";\nimport axios from \"axios\";\n\nfunction makePostAPI(data) {\n  return axios.post(\"/post\", data, {\n    withCredentials: true\n  });\n}\n\nfunction makePost(action) {\n  var Post;\n  return _regeneratorRuntime.wrap(function makePost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(makePostAPI, action.payload);\n\n        case 3:\n          Post = _context.sent;\n          put({\n            type: MAKE_POST_SUCCESS,\n            result: {\n              body: Post.data.post,\n              nickname: Post.data.nickname,\n              date: Post.data.date,\n              title: Post.data.title,\n              _id: Post.data._id\n            }\n          });\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          put({\n            type: MAKE_POST_FAILURE,\n            error: _context.t0.response\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchMakePost() {\n  return _regeneratorRuntime.wrap(function watchMakePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(MAKE_POST_REQUEST, makePost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchMakePost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["D:/webdev/web_blog/front/sagas/post.ts"],"names":["makePost","watchMakePost","postSaga","all","fork","takeLatest","put","call","MAKE_POST_REQUEST","MAKE_POST_SUCCESS","MAKE_POST_FAILURE","axios","makePostAPI","data","post","withCredentials","action","payload","Post","type","result","body","nickname","date","title","_id","console","error","response"],"mappings":";;;;yBAcUA,Q;;;yBAsBAC,a;;;yBAIeC,Q;;AAxCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,iBAHF,QAIO,0BAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,SAAOF,KAAK,CAACG,IAAN,CAAW,OAAX,EAAoBD,IAApB,EAA0B;AAC/BE,IAAAA,eAAe,EAAE;AADc,GAA1B,CAAP;AAGD;;AAED,SAAUf,QAAV,CAAmBgB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMT,IAAI,CAACK,WAAD,EAAcI,MAAM,CAACC,OAArB,CAAV;;AAFjB;AAEUC,UAAAA,IAFV;AAGIZ,UAAAA,GAAG,CAAC;AACFa,YAAAA,IAAI,EAAEV,iBADJ;AAEFW,YAAAA,MAAM,EAAE;AACNC,cAAAA,IAAI,EAAEH,IAAI,CAACL,IAAL,CAAUC,IADV;AAENQ,cAAAA,QAAQ,EAAEJ,IAAI,CAACL,IAAL,CAAUS,QAFd;AAGNC,cAAAA,IAAI,EAAEL,IAAI,CAACL,IAAL,CAAUU,IAHV;AAINC,cAAAA,KAAK,EAAEN,IAAI,CAACL,IAAL,CAAUW,KAJX;AAKNC,cAAAA,GAAG,EAAEP,IAAI,CAACL,IAAL,CAAUY;AALT;AAFN,WAAD,CAAH;AAHJ;AAAA;;AAAA;AAAA;AAAA;AAcIC,UAAAA,OAAO,CAACC,KAAR;AACArB,UAAAA,GAAG,CAAC;AACFa,YAAAA,IAAI,EAAET,iBADJ;AAEFiB,YAAAA,KAAK,EAAE,YAAEC;AAFP,WAAD,CAAH;;AAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,SAAU3B,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,UAAU,CAACG,iBAAD,EAAoBR,QAApB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,aAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\r\nimport {\r\n  MAKE_POST_REQUEST,\r\n  MAKE_POST_SUCCESS,\r\n  MAKE_POST_FAILURE\r\n} from \"../reducers/post/actions\";\r\nimport axios from \"axios\";\r\n\r\nfunction makePostAPI(data) {\r\n  return axios.post(\"/post\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* makePost(action) {\r\n  try {\r\n    const Post = yield call(makePostAPI, action.payload);\r\n    put({\r\n      type: MAKE_POST_SUCCESS,\r\n      result: {\r\n        body: Post.data.post,\r\n        nickname: Post.data.nickname,\r\n        date: Post.data.date,\r\n        title: Post.data.title,\r\n        _id: Post.data._id\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    put({\r\n      type: MAKE_POST_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchMakePost() {\r\n  yield takeLatest(MAKE_POST_REQUEST, makePost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchMakePost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}