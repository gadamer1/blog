{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"D:\\\\webdev\\\\web_blog\\\\front\\\\Components\\\\admin\\\\MakePosts\\\\MakePostsForm.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { EditorState, convertToRaw, convertFromRaw } from \"draft-js\";\nimport Router from \"next/router\";\nimport { Editor } from \"react-draft-wysiwyg\"; //load editor css\n\nimport \"../../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport { Button, Typography, Select, MenuItem, TextField, FormControl, FormLabel, FormControlLabel, Checkbox } from \"@material-ui/core\";\nimport CircularProgressComponent from \"../../../utils/Components/CircularProgressComponent\";\nimport { MAKE_POST_REQUEST, MAKE_POST_FAILURE } from \"../../../reducers/post/actions\";\n\nfunction uploadImageCallBack(file) {\n  return new _Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", \"https://api.imgur.com/3/image\");\n    xhr.setRequestHeader(\"Authorization\", \"Client-ID b1e6509aad56ae0\");\n    const data = new FormData();\n    data.append(\"image\", file);\n    xhr.send(data);\n    xhr.addEventListener(\"load\", () => {\n      const response = JSON.parse(xhr.responseText);\n      resolve(response);\n    });\n    xhr.addEventListener(\"error\", () => {\n      const error = JSON.parse(xhr.responseText);\n      reject(error);\n    });\n  });\n}\n\nconst MakePostsForm = () => {\n  const {\n    0: editorState,\n    1: setEditorState\n  } = useState(\"\");\n  const {\n    0: category,\n    1: setCategory\n  } = useState(\"dev\");\n  const {\n    0: hidden,\n    1: setHidden\n  } = useState(false);\n  const dispatch = useDispatch();\n  const {\n    isPosting,\n    isPostingSuccess\n  } = useSelector(state => state.post.loadingStates);\n  const {\n    _id\n  } = useSelector(state => state.user.user); // 포스팅 완료됐으면 튕구기\n\n  useEffect(() => {\n    if (isPostingSuccess) {\n      dispatch({\n        type: MAKE_POST_FAILURE\n      });\n      Router.push(\"/postList\");\n    }\n  }, [isPostingSuccess]);\n  useEffect(() => {\n    const content = window.localStorage.getItem(\"content\");\n\n    if (content) {\n      setEditorState(EditorState.createWithContent(convertFromRaw(JSON.parse(content))));\n    } else {\n      setEditorState(EditorState.createEmpty());\n    }\n  }, []);\n\n  const saveContent = content => {\n    window.localStorage.setItem(\"content\", _JSON$stringify(convertToRaw(content)));\n  };\n\n  const onChangeEditorState = editorState => {\n    const contentState = editorState.getCurrentContent();\n    saveContent(contentState);\n    setEditorState(editorState);\n  };\n\n  const _onClickPostButton = e => {\n    dispatch({\n      type: MAKE_POST_REQUEST,\n      payload: {\n        authorId: _id,\n        category,\n        body: _JSON$stringify(convertToRaw(editorState))\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(FormControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(TextField, {\n    id: \"outlined-basic\",\n    label: \"\\uC81C\\uBAA9\",\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), __jsx(FormLabel, {\n    component: \"legend\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"\\uCE74\\uD14C\\uACE0\\uB9AC\"), __jsx(Select, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, __jsx(MenuItem, {\n    value: \"dev\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"\\uAC1C\\uBC1C\"), __jsx(MenuItem, {\n    value: \"hacking\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"\\uD574\\uD0B9\"), __jsx(MenuItem, {\n    value: \"finance\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"\\uC7AC\\uD14C\\uD06C\"), __jsx(MenuItem, {\n    value: \"business\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"\\uBE44\\uC988\\uB2C8\\uC2A4\")), __jsx(Editor //@ts-ignore\n  , {\n    editorState: editorState,\n    editorClassName: \"demo-editor\",\n    onEditorStateChange: onChangeEditorState,\n    localization: {\n      locale: \"ko\"\n    },\n    toolbar: {\n      image: {\n        uploadCallback: uploadImageCallBack,\n        alt: {\n          present: true,\n          mandatory: true\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), __jsx(Button, {\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: _onClickPostButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, isPosting ? __jsx(CircularProgressComponent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }) : __jsx(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"\\uD3EC\\uC2A4\\uD305\")), __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      checked: hidden,\n      onChange: e => {\n        setHidden(e.target.checked);\n      },\n      value: hidden,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }),\n    label: \"Primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  })));\n};\n\nexport default MakePostsForm;","map":{"version":3,"sources":["D:/webdev/web_blog/front/Components/admin/MakePosts/MakePostsForm.tsx"],"names":["React","useEffect","useState","useDispatch","useSelector","EditorState","convertToRaw","convertFromRaw","Router","Editor","Button","Typography","Select","MenuItem","TextField","FormControl","FormLabel","FormControlLabel","Checkbox","CircularProgressComponent","MAKE_POST_REQUEST","MAKE_POST_FAILURE","uploadImageCallBack","file","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","data","FormData","append","send","addEventListener","response","JSON","parse","responseText","error","MakePostsForm","editorState","setEditorState","category","setCategory","hidden","setHidden","dispatch","isPosting","isPostingSuccess","state","post","loadingStates","_id","user","type","push","content","window","localStorage","getItem","createWithContent","createEmpty","saveContent","setItem","onChangeEditorState","contentState","getCurrentContent","_onClickPostButton","e","payload","authorId","body","locale","image","uploadCallback","alt","present","mandatory","target","checked"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { EditorState, convertToRaw, convertFromRaw } from \"draft-js\";\r\nimport Router from \"next/router\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\n//load editor css\r\nimport \"../../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\n\r\nimport {\r\n  Button,\r\n  Typography,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  FormControl,\r\n  FormLabel,\r\n  FormControlLabel,\r\n  Checkbox\r\n} from \"@material-ui/core\";\r\nimport { store } from \"../../../reducers/types\";\r\nimport CircularProgressComponent from \"../../../utils/Components/CircularProgressComponent\";\r\nimport {\r\n  MAKE_POST_REQUEST,\r\n  MAKE_POST_FAILURE\r\n} from \"../../../reducers/post/actions\";\r\n\r\nfunction uploadImageCallBack(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", \"https://api.imgur.com/3/image\");\r\n    xhr.setRequestHeader(\"Authorization\", \"Client-ID b1e6509aad56ae0\");\r\n    const data = new FormData();\r\n    data.append(\"image\", file);\r\n    xhr.send(data);\r\n    xhr.addEventListener(\"load\", () => {\r\n      const response = JSON.parse(xhr.responseText);\r\n      resolve(response);\r\n    });\r\n    xhr.addEventListener(\"error\", () => {\r\n      const error = JSON.parse(xhr.responseText);\r\n      reject(error);\r\n    });\r\n  });\r\n}\r\n\r\nconst MakePostsForm = () => {\r\n  const [editorState, setEditorState] = useState(\"\");\r\n  const [category, setCategory] = useState(\"dev\");\r\n  const [hidden, setHidden] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { isPosting, isPostingSuccess } = useSelector(\r\n    (state: store) => state.post.loadingStates\r\n  );\r\n  const { _id } = useSelector((state: store) => state.user.user);\r\n  // 포스팅 완료됐으면 튕구기\r\n  useEffect(() => {\r\n    if (isPostingSuccess) {\r\n      dispatch({\r\n        type: MAKE_POST_FAILURE\r\n      });\r\n      Router.push(\"/postList\");\r\n    }\r\n  }, [isPostingSuccess]);\r\n  useEffect(() => {\r\n    const content = window.localStorage.getItem(\"content\");\r\n    if (content) {\r\n      setEditorState(\r\n        EditorState.createWithContent(convertFromRaw(JSON.parse(content)))\r\n      );\r\n    } else {\r\n      setEditorState(EditorState.createEmpty());\r\n    }\r\n  }, []);\r\n\r\n  const saveContent = content => {\r\n    window.localStorage.setItem(\r\n      \"content\",\r\n      JSON.stringify(convertToRaw(content))\r\n    );\r\n  };\r\n\r\n  const onChangeEditorState: Function = editorState => {\r\n    const contentState = editorState.getCurrentContent();\r\n    saveContent(contentState);\r\n    setEditorState(editorState);\r\n  };\r\n\r\n  const _onClickPostButton = e => {\r\n    dispatch({\r\n      type: MAKE_POST_REQUEST,\r\n      payload: {\r\n        authorId: _id,\r\n        category,\r\n        body: JSON.stringify(convertToRaw(editorState))\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormControl>\r\n        <TextField id=\"outlined-basic\" label=\"제목\" variant=\"outlined\" />\r\n        <FormLabel component=\"legend\">카테고리</FormLabel>\r\n        <Select>\r\n          <MenuItem value=\"dev\">개발</MenuItem>\r\n          <MenuItem value=\"hacking\">해킹</MenuItem>\r\n          <MenuItem value=\"finance\">재테크</MenuItem>\r\n          <MenuItem value=\"business\">비즈니스</MenuItem>\r\n        </Select>\r\n\r\n        <Editor\r\n          //@ts-ignore\r\n          editorState={editorState}\r\n          editorClassName=\"demo-editor\"\r\n          onEditorStateChange={onChangeEditorState}\r\n          localization={{ locale: \"ko\" }}\r\n          toolbar={{\r\n            image: {\r\n              uploadCallback: uploadImageCallBack,\r\n              alt: { present: true, mandatory: true }\r\n            }\r\n          }}\r\n        />\r\n        <Button\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={_onClickPostButton}\r\n        >\r\n          {isPosting ? (\r\n            <CircularProgressComponent />\r\n          ) : (\r\n            <Typography>포스팅</Typography>\r\n          )}\r\n        </Button>\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              checked={hidden}\r\n              onChange={e => {\r\n                setHidden(e.target.checked);\r\n              }}\r\n              value={hidden}\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label=\"Primary\"\r\n        />\r\n      </FormControl>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MakePostsForm;\r\n"]},"metadata":{},"sourceType":"module"}