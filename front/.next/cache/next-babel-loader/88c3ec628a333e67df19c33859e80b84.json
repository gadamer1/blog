{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\blog\\\\front\\\\pages\\\\post\\\\[category]\\\\[title].tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useSelector } from \"react-redux\";\nimport { FETCH_POST_REQUEST } from \"../../../reducers/post/actions\";\nimport { Grid, Typography, Chip } from \"@material-ui/core\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport { Face as FaceIcon } from \"@material-ui/icons\";\nimport Router from \"next/router\";\nimport Breadcrumb from \"../../../Components/BreadCrumb\";\nimport CustomMarkdown from \"../../../Components/CustomMarkdown\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    width: \"80%\",\n    backgroundColor: theme.palette.background.paper,\n    justifyContent: \"center\",\n    paddingLeft: \"20px\"\n  },\n  container: {\n    marginBottom: \"200px\"\n  },\n  title: {\n    border: \"1px solid black\"\n  }\n}));\n\nconst Post = () => {\n  const classes = useStyles({});\n  const {\n    currentPost\n  } = useSelector(state => state.post);\n  const {\n    isPostLoading\n  } = useSelector(state => state.post.loadingStates);\n  const {\n    category,\n    title\n  } = useRouter().query;\n\n  const _onClickNickname = nickname => () => {\n    Router.push(`/profile/${nickname}`);\n  };\n\n  if (isPostLoading) {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"\\uB85C\\uB529\\uC911 \\uC785\\uB2C8\\uB2E4!\"));\n  } else if (currentPost) {\n    return __jsx(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, __jsx(Breadcrumb, {\n      category: category,\n      title: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), __jsx(Grid, {\n      container: true,\n      className: classes.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, __jsx(Typography, {\n      variant: \"h5\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"\\uC81C\\uBAA9\", __jsx(Typography, {\n      variant: \"h4\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, currentPost.title))), __jsx(Grid, {\n      item: true,\n      xs: 6,\n      style: {\n        float: \"right\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(Chip, {\n      icon: __jsx(FaceIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }),\n      onClick: _onClickNickname(currentPost.nickname),\n      label: currentPost.nickname,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), __jsx(Typography, {\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, currentPost.Date))), currentPost && __jsx(CustomMarkdown, {\n      source: currentPost.body,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }));\n  } else {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"\\uD3EC\\uC2A4\\uD2B8\\uAC00 \\uC874\\uC7AC\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4\");\n  }\n};\n\nPost.getInitialProps = ctx => {\n  const {\n    title,\n    category\n  } = ctx.query;\n  ctx.store.dispatch({\n    type: FETCH_POST_REQUEST,\n    payload: {\n      title,\n      category\n    }\n  });\n  return {};\n};\n\nexport default Post;","map":{"version":3,"sources":["D:/webdev/blog/front/pages/post/[category]/[title].tsx"],"names":["React","useRouter","useSelector","FETCH_POST_REQUEST","Grid","Typography","Chip","makeStyles","createStyles","Face","FaceIcon","Router","Breadcrumb","CustomMarkdown","useStyles","theme","root","width","backgroundColor","palette","background","paper","justifyContent","paddingLeft","container","marginBottom","title","border","Post","classes","currentPost","state","post","isPostLoading","loadingStates","category","query","_onClickNickname","nickname","push","float","Date","body","getInitialProps","ctx","store","dispatch","type","payload"],"mappings":"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","sourcesContent":["import React, { useEffect, Context } from \"react\";\r\n\r\nimport { useRouter } from \"next/router\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  GET_POST_REQUEST,\r\n  FETCH_POST_REQUEST\r\n} from \"../../../reducers/post/actions\";\r\nimport { store } from \"../../../reducers/types\";\r\nimport { Grid, Typography, Chip } from \"@material-ui/core\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport { Face as FaceIcon } from \"@material-ui/icons\";\r\nimport Router from \"next/router\";\r\nimport Breadcrumb from \"../../../Components/BreadCrumb\";\r\nimport CustomMarkdown from \"../../../Components/CustomMarkdown\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"80%\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      justifyContent: \"center\",\r\n      paddingLeft: \"20px\"\r\n    },\r\n    container: {\r\n      marginBottom: \"200px\"\r\n    },\r\n    title: {\r\n      border: \"1px solid black\"\r\n    }\r\n  })\r\n);\r\n\r\nconst Post = () => {\r\n  const classes = useStyles({});\r\n  const { currentPost } = useSelector((state: store) => state.post);\r\n  const { isPostLoading } = useSelector(\r\n    (state: store) => state.post.loadingStates\r\n  );\r\n\r\n  const { category, title } = useRouter().query;\r\n\r\n  const _onClickNickname = nickname => () => {\r\n    Router.push(`/profile/${nickname}`);\r\n  };\r\n\r\n  if (isPostLoading) {\r\n    return (\r\n      <>\r\n        <div>로딩중 입니다!</div>\r\n      </>\r\n    );\r\n  } else if (currentPost) {\r\n    return (\r\n      <div className={classes.root}>\r\n        <Breadcrumb category={category} title={title} />\r\n        <Grid container className={classes.container}>\r\n          <Grid item xs={6}>\r\n            <Typography variant=\"h5\" color=\"secondary\">\r\n              제목\r\n              <Typography variant=\"h4\" color=\"primary\">\r\n                {currentPost.title}\r\n              </Typography>\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={6} style={{ float: \"right\" }}>\r\n            <Chip\r\n              icon={<FaceIcon />}\r\n              onClick={_onClickNickname(currentPost.nickname)}\r\n              label={currentPost.nickname}\r\n            />\r\n            <Typography color=\"textSecondary\">{currentPost.Date}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {currentPost && <CustomMarkdown source={currentPost.body} />}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div>포스트가 존재하지 않습니다</div>;\r\n  }\r\n};\r\n\r\nPost.getInitialProps = ctx => {\r\n  const { title, category } = ctx.query;\r\n\r\n  ctx.store.dispatch({\r\n    type: FETCH_POST_REQUEST,\r\n    payload: {\r\n      title,\r\n      category\r\n    }\r\n  });\r\n  return {};\r\n};\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}