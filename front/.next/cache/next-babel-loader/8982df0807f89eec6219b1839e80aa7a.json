{"ast":null,"code":"import { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user/actions\"; // 회원가입 요청\n\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data, {\n    withCredentials: true\n  });\n}\n\nfunction* signUp(action) {\n  try {\n    const User = yield call(signUpAPI, action.payload);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      result: User.data.user\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e.status\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n} // 로그인 요청\n\n\nfunction loginAPI(data) {\n  return axios.post(\"/user/login\", data, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const User = yield call(loginAPI, action.payload);\n    yield put({\n      type: LOGIN_SUCCESS,\n      result: User.data.user\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOGIN_FAILURE,\n      error: e.msg\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:/webdev/web_blog/front/sagas/user.ts"],"names":["all","fork","put","takeLatest","call","axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","signUpAPI","data","post","withCredentials","signUp","action","User","payload","type","result","user","e","console","error","status","watchSignUp","loginAPI","login","log","msg","watchLogin","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAKA,SACEC,aADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAOO,0BAPP,C,CASA;;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,SAAOR,KAAK,CAACS,IAAN,CAAW,OAAX,EAAoBD,IAApB,EAA0B;AAC/BE,IAAAA,eAAe,EAAE;AADc,GAA1B,CAAP;AAGD;;AAED,UAAUC,MAAV,CAAiBC,MAAjB,EAA8C;AAC5C,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMd,IAAI,CAACQ,SAAD,EAAYK,MAAM,CAACE,OAAnB,CAAvB;AACA,UAAMjB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEV,eADE;AAERW,MAAAA,MAAM,EAAEH,IAAI,CAACL,IAAL,CAAUS;AAFV,KAAD,CAAT;AAID,GAND,CAME,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMrB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAET,eADE;AAERc,MAAAA,KAAK,EAAEF,CAAC,CAACG;AAFD,KAAD,CAAT;AAID;AACF;;AAED,UAAUC,WAAV,GAAwB;AACtB,QAAMxB,UAAU,CAACM,eAAD,EAAkBO,MAAlB,CAAhB;AACD,C,CAED;;;AACA,SAASY,QAAT,CAAkBf,IAAlB,EAAwB;AACtB,SAAOR,KAAK,CAACS,IAAN,CAAW,aAAX,EAA0BD,IAA1B,EAAgC;AACrCE,IAAAA,eAAe,EAAE;AADoB,GAAhC,CAAP;AAGD;;AAED,UAAUc,KAAV,CAAgBZ,MAAhB,EAA4C;AAC1C,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMd,IAAI,CAACwB,QAAD,EAAWX,MAAM,CAACE,OAAlB,CAAvB;AACA,UAAMjB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEb,aADE;AAERc,MAAAA,MAAM,EAAEH,IAAI,CAACL,IAAL,CAAUS;AAFV,KAAD,CAAT;AAID,GAND,CAME,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACM,GAAR,CAAYP,CAAZ;AACA,UAAMrB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEZ,aADE;AAERiB,MAAAA,KAAK,EAAEF,CAAC,CAACQ;AAFD,KAAD,CAAT;AAID;AACF;;AAED,UAAUC,UAAV,GAAuB;AACrB,QAAM7B,UAAU,CAACG,aAAD,EAAgBuB,KAAhB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMjC,GAAG,CAAC,CAACC,IAAI,CAAC+B,UAAD,CAAL,EAAmB/B,IAAI,CAAC0B,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  loginRequestAction,\r\n  signUpRequsetAction\r\n} from \"../reducers/user/interfaces\";\r\nimport {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE\r\n} from \"../reducers/user/actions\";\r\n\r\n// 회원가입 요청\r\nfunction signUpAPI(data) {\r\n  return axios.post(\"/user\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* signUp(action: signUpRequsetAction) {\r\n  try {\r\n    const User = yield call(signUpAPI, action.payload);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      result: User.data.user\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e.status\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n// 로그인 요청\r\nfunction loginAPI(data) {\r\n  return axios.post(\"/user/login\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* login(action: loginRequestAction) {\r\n  try {\r\n    const User = yield call(loginAPI, action.payload);\r\n    yield put({\r\n      type: LOGIN_SUCCESS,\r\n      result: User.data.user\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: LOGIN_FAILURE,\r\n      error: e.msg\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOGIN_REQUEST, login);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchSignUp)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}