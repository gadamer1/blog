{"ast":null,"code":"import produce from \"immer\";\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST } from \"./actions\";\n\n/*INITIAL STATE */\nvar initialState = {\n  user: null,\n  loadingStates: {\n    isLoging: false,\n    isSigning: false\n  },\n  metaStates: {\n    isLoggedIn: false,\n    loginStautsCode: 0,\n    signUpStatusCode: 0\n  }\n};\nvar mockUser = {\n  nickname: \"gadamer\",\n  emailVerified: false\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOGIN_REQUEST:\n        {\n          draft.loadingStates.isLoging = true;\n          break;\n        }\n\n      case LOGIN_SUCCESS:\n        {\n          draft.loadingStates.isLoging = false;\n          draft.metaStates.isLoggedIn = true;\n          draft.metaStates.loginStautsCode = 200; // draft.user = action.result;\n\n          draft.user = mockUser;\n          break;\n        }\n\n      case LOGIN_FAILURE:\n        {\n          draft.loadingStates.isLoging = false;\n          draft.metaStates.loginStautsCode = action.errorCode;\n        }\n\n      case SIGN_UP_REQUEST:\n        {\n          draft.loadingStates.isSigning = true;\n          break;\n        }\n\n      case SIGN_UP_SUCCESS:\n        {\n          draft.loadingStates.isSigning = false;\n          draft.metaStates.isLoggedIn = true;\n          draft.user = action.payload;\n          break;\n        }\n\n      case SIGN_UP_FAILURE:\n        {\n          draft.loadingStates.isSigning = false;\n          draft.metaStates.signUpStatusCode = action.errorCode;\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  });\n});","map":{"version":3,"sources":["D:/webdev/web_blog/front/reducers/user/index.ts"],"names":["produce","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","initialState","user","loadingStates","isLoging","isSigning","metaStates","isLoggedIn","loginStautsCode","signUpStatusCode","mockUser","nickname","emailVerified","state","action","draft","type","errorCode","payload"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAOO,WAPP;;AAUA;AACA,IAAMC,YAAuB,GAAG;AAC9BC,EAAAA,IAAI,EAAE,IADwB;AAE9BC,EAAAA,aAAa,EAAE;AACbC,IAAAA,QAAQ,EAAE,KADG;AAEbC,IAAAA,SAAS,EAAE;AAFE,GAFe;AAM9BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,UAAU,EAAE,KADF;AAEVC,IAAAA,eAAe,EAAE,CAFP;AAGVC,IAAAA,gBAAgB,EAAE;AAHR;AANkB,CAAhC;AAaA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,QAAQ,EAAE,SADK;AAEfC,EAAAA,aAAa,EAAE;AAFA,CAAjB;AAKA,gBAAe,YAA+C;AAAA,MAA9CC,KAA8C,uEAAtCZ,YAAsC;AAAA,MAAxBa,MAAwB;AAC5D,SAAOpB,OAAO,CAACmB,KAAD,EAAQ,UAAAE,KAAK,EAAI;AAC7B,YAAQD,MAAM,CAACE,IAAf;AACE,WAAKrB,aAAL;AAAoB;AAClBoB,UAAAA,KAAK,CAACZ,aAAN,CAAoBC,QAApB,GAA+B,IAA/B;AACA;AACD;;AACD,WAAKR,aAAL;AAAoB;AAClBmB,UAAAA,KAAK,CAACZ,aAAN,CAAoBC,QAApB,GAA+B,KAA/B;AACAW,UAAAA,KAAK,CAACT,UAAN,CAAiBC,UAAjB,GAA8B,IAA9B;AACAQ,UAAAA,KAAK,CAACT,UAAN,CAAiBE,eAAjB,GAAmC,GAAnC,CAHkB,CAIlB;;AACAO,UAAAA,KAAK,CAACb,IAAN,GAAaQ,QAAb;AAEA;AACD;;AACD,WAAKb,aAAL;AAAoB;AAClBkB,UAAAA,KAAK,CAACZ,aAAN,CAAoBC,QAApB,GAA+B,KAA/B;AACAW,UAAAA,KAAK,CAACT,UAAN,CAAiBE,eAAjB,GAAmCM,MAAM,CAACG,SAA1C;AACD;;AACD,WAAKjB,eAAL;AAAsB;AACpBe,UAAAA,KAAK,CAACZ,aAAN,CAAoBE,SAApB,GAAgC,IAAhC;AACA;AACD;;AACD,WAAKP,eAAL;AAAsB;AACpBiB,UAAAA,KAAK,CAACZ,aAAN,CAAoBE,SAApB,GAAgC,KAAhC;AACAU,UAAAA,KAAK,CAACT,UAAN,CAAiBC,UAAjB,GAA8B,IAA9B;AACAQ,UAAAA,KAAK,CAACb,IAAN,GAAaY,MAAM,CAACI,OAApB;AACA;AACD;;AACD,WAAKnB,eAAL;AAAsB;AACpBgB,UAAAA,KAAK,CAACZ,aAAN,CAAoBE,SAApB,GAAgC,KAAhC;AACAU,UAAAA,KAAK,CAACT,UAAN,CAAiBG,gBAAjB,GAAoCK,MAAM,CAACG,SAA3C;AACA;AACD;;AACD;AAAS;AACP;AACD;AAnCH;AAqCD,GAtCa,CAAd;AAuCD,CAxCD","sourcesContent":["import produce from \"immer\";\r\nimport {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_REQUEST\r\n} from \"./actions\";\r\nimport { userActions, userStore } from \"./interfaces\";\r\n\r\n/*INITIAL STATE */\r\nconst initialState: userStore = {\r\n  user: null,\r\n  loadingStates: {\r\n    isLoging: false,\r\n    isSigning: false\r\n  },\r\n  metaStates: {\r\n    isLoggedIn: false,\r\n    loginStautsCode: 0,\r\n    signUpStatusCode: 0\r\n  }\r\n};\r\n\r\nconst mockUser = {\r\n  nickname: \"gadamer\",\r\n  emailVerified: false\r\n};\r\n\r\nexport default (state = initialState, action: userActions) => {\r\n  return produce(state, draft => {\r\n    switch (action.type) {\r\n      case LOGIN_REQUEST: {\r\n        draft.loadingStates.isLoging = true;\r\n        break;\r\n      }\r\n      case LOGIN_SUCCESS: {\r\n        draft.loadingStates.isLoging = false;\r\n        draft.metaStates.isLoggedIn = true;\r\n        draft.metaStates.loginStautsCode = 200;\r\n        // draft.user = action.result;\r\n        draft.user = mockUser;\r\n\r\n        break;\r\n      }\r\n      case LOGIN_FAILURE: {\r\n        draft.loadingStates.isLoging = false;\r\n        draft.metaStates.loginStautsCode = action.errorCode;\r\n      }\r\n      case SIGN_UP_REQUEST: {\r\n        draft.loadingStates.isSigning = true;\r\n        break;\r\n      }\r\n      case SIGN_UP_SUCCESS: {\r\n        draft.loadingStates.isSigning = false;\r\n        draft.metaStates.isLoggedIn = true;\r\n        draft.user = action.payload;\r\n        break;\r\n      }\r\n      case SIGN_UP_FAILURE: {\r\n        draft.loadingStates.isSigning = false;\r\n        draft.metaStates.signUpStatusCode = action.errorCode;\r\n        break;\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}