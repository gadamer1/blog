{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"D:\\\\webdev\\\\blog\\\\front\\\\pages\\\\post\\\\[category].tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useSelector } from \"react-redux\";\nimport { GET_POSTS_REQUEST } from \"../../reducers/post/actions\";\nimport { Link, Grid, Typography, Divider, Paper } from \"@material-ui/core\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      flexGrow: 1\n    },\n    paper: {\n      padding: theme.spacing(2),\n      margin: \"auto\",\n      maxWidth: 500\n    },\n    image: {\n      width: 128,\n      height: 128\n    },\n    img: {\n      margin: \"auto\",\n      display: \"block\",\n      maxWidth: \"100%\",\n      maxHeight: \"100%\"\n    }\n  });\n});\n\nvar Post = function Post() {\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      posts = _useSelector.posts;\n\n  var router = useRouter();\n  var category = router.query.category;\n  var classes = useStyles({});\n  return __jsx(React.Fragment, null, __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    spacing: 3,\n    className: classes.roout,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, category)), __jsx(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), posts && posts.map(function (post) {\n    return __jsx(React.Fragment, null, __jsx(Link, {\n      href: \"/post/\".concat(category, \"/\").concat(post.title),\n      key: post._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, __jsx(Grid, {\n      key: post._id,\n      item: true,\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, __jsx(Paper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, __jsx(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, post.title), __jsx(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, post.nickname), __jsx(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, post.Date)))));\n  })));\n};\n\nPost.getInitialProps = function _callee(ctx) {\n  var category;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          category = ctx.query.category;\n          ctx.store.dispatch({\n            type: GET_POSTS_REQUEST,\n            payload: {\n              category: category\n            }\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Post;","map":{"version":3,"sources":["D:/webdev/blog/front/pages/post/[category].tsx"],"names":["React","useRouter","useSelector","GET_POSTS_REQUEST","Link","Grid","Typography","Divider","Paper","makeStyles","createStyles","useStyles","theme","root","flexGrow","paper","padding","spacing","margin","maxWidth","image","width","height","img","display","maxHeight","Post","state","post","posts","router","category","query","classes","roout","map","title","_id","nickname","Date","getInitialProps","ctx","store","dispatch","type","payload"],"mappings":"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","sourcesContent":["import React, { useEffect, Context } from \"react\";\r\nimport { NextPage, NextPageContext } from \"next\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { GET_POSTS_REQUEST } from \"../../reducers/post/actions\";\r\nimport { store } from \"../../reducers/types\";\r\nimport { Link, Grid, Typography, Divider, Paper } from \"@material-ui/core\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      margin: \"auto\",\r\n      maxWidth: 500\r\n    },\r\n    image: {\r\n      width: 128,\r\n      height: 128\r\n    },\r\n    img: {\r\n      margin: \"auto\",\r\n      display: \"block\",\r\n      maxWidth: \"100%\",\r\n      maxHeight: \"100%\"\r\n    }\r\n  })\r\n);\r\n\r\nconst Post = () => {\r\n  const { posts } = useSelector((state: store) => state.post);\r\n  const router = useRouter();\r\n  const { category } = router.query;\r\n\r\n  const classes = useStyles({});\r\n\r\n  return (\r\n    <>\r\n      <Grid container justify=\"center\" spacing={3} className={classes.roout}>\r\n        <Grid item xs={12}>\r\n          <Typography>{category}</Typography>\r\n        </Grid>\r\n        <Divider />\r\n        {posts &&\r\n          posts.map(post => {\r\n            return (\r\n              <>\r\n                <Link href={`/post/${category}/${post.title}`} key={post._id}>\r\n                  <Grid key={post._id} item xs={6}>\r\n                    <Paper>\r\n                      <Typography>{post.title}</Typography>\r\n                      <Typography>{post.nickname}</Typography>\r\n                      <Typography>{post.Date}</Typography>\r\n                    </Paper>\r\n                  </Grid>\r\n                </Link>\r\n              </>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nPost.getInitialProps = async ctx => {\r\n  const { category } = ctx.query;\r\n  ctx.store.dispatch({\r\n    type: GET_POSTS_REQUEST,\r\n    payload: { category }\r\n  });\r\n};\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}