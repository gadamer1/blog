{"ast":null,"code":"import { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from \"../reducers/user/actions\"; // 회원가입 요청\n\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data, {\n    withCredentials: true\n  });\n}\n\nfunction* signUp(action) {\n  try {\n    const User = yield call(signUpAPI, action.payload);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      result: User.data.user\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e.response.status\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n} // 로그인 요청\n\n\nfunction loginAPI(data) {\n  return axios.post(\"/user/login\", data, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const User = yield call(loginAPI, action.payload);\n    yield put({\n      type: LOGIN_SUCCESS,\n      result: User.data\n    });\n  } catch (e) {\n    console.log(e);\n    console.log(e.data);\n    yield put({\n      type: LOGIN_FAILURE,\n      error: e.response.status\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nfunction loadUserAPI() {\n  return axios.get(\"/user/is-login\", {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    const User = yield call(loadUserAPI);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      result: User.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e.response.status\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp), fork(watchLoadUser)]);\n}","map":{"version":3,"sources":["D:/webdev/web_blog/front/sagas/user.ts"],"names":["all","fork","put","takeLatest","call","axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","signUpAPI","data","post","withCredentials","signUp","action","User","payload","type","result","user","e","console","error","response","status","watchSignUp","loginAPI","login","log","watchLogin","loadUserAPI","get","loadUser","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  put,\r\n  takeLatest,\r\n  call,\r\n  actionChannel\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  loginRequestAction,\r\n  signUpRequsetAction\r\n} from \"../reducers/user/interfaces\";\r\nimport {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  LOAD_USER_REQUEST,\r\n  LOAD_USER_SUCCESS,\r\n  LOAD_USER_FAILURE\r\n} from \"../reducers/user/actions\";\r\n\r\n// 회원가입 요청\r\nfunction signUpAPI(data) {\r\n  return axios.post(\"/user\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* signUp(action: signUpRequsetAction) {\r\n  try {\r\n    const User = yield call(signUpAPI, action.payload);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      result: User.data.user\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e.response.status\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n// 로그인 요청\r\nfunction loginAPI(data) {\r\n  return axios.post(\"/user/login\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* login(action: loginRequestAction) {\r\n  try {\r\n    const User = yield call(loginAPI, action.payload);\r\n    yield put({\r\n      type: LOGIN_SUCCESS,\r\n      result: User.data\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    console.log(e.data);\r\n    yield put({\r\n      type: LOGIN_FAILURE,\r\n      error: e.response.status\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOGIN_REQUEST, login);\r\n}\r\n\r\nfunction loadUserAPI() {\r\n  return axios.get(\"/user/is-login\", {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* loadUser() {\r\n  try {\r\n    const User = yield call(loadUserAPI);\r\n    yield put({\r\n      type: LOAD_USER_SUCCESS,\r\n      result: User.data\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_USER_FAILURE,\r\n      error: e.response.status\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchSignUp), fork(watchLoadUser)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}