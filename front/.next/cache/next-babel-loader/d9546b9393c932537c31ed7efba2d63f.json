{"ast":null,"code":"import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport { MAKE_POST_REQUEST, MAKE_POST_SUCCESS, MAKE_POST_FAILURE, GET_POSTS_REQUEST, GET_POSTS_SUCCESS, GET_POSTS_FAILURE } from \"../reducers/post/actions\";\nimport axios from \"axios\";\n\nfunction makePostAPI(data) {\n  return axios.post(\"/post\", data, {\n    withCredentials: true\n  });\n}\n\nfunction* makePost(action) {\n  try {\n    const Post = yield call(makePostAPI, action.payload);\n    yield put({\n      type: MAKE_POST_SUCCESS,\n      result: {\n        body: Post.data.post,\n        nickname: Post.data.nickname,\n        date: Post.data.date,\n        title: Post.data.title,\n        _id: Post.data._id\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: MAKE_POST_FAILURE,\n      error: e.response\n    });\n  }\n}\n\nfunction* watchMakePost() {\n  yield takeLatest(MAKE_POST_REQUEST, makePost);\n}\n\nfunction getPostsAPI() {\n  return axios.get(\"/posts\", {\n    withCredentials: true\n  });\n}\n\nfunction* getPosts() {\n  try {\n    const Posts = yield call(getPostsAPI);\n    yield put({\n      type: GET_POSTS_SUCCESS,\n      result: Posts.data.postLists\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: GET_POSTS_FAILURE,\n      error: e.response\n    });\n  }\n}\n\nfunction* watchGetPosts() {\n  yield takeLatest(GET_POSTS_REQUEST, getPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchMakePost), fork(watchGetPosts)]);\n}","map":null,"metadata":{},"sourceType":"module"}