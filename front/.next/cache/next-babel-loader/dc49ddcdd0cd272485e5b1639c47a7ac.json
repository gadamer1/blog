{"ast":null,"code":"import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport { MAKE_POST_REQUEST, MAKE_POST_SUCCESS, MAKE_POST_FAILURE, GET_POSTS_REQUEST, GET_POSTS_SUCCESS, GET_POSTS_FAILURE, GET_POST_REQUEST, GET_POST_FAILURE, GET_POST_SUCCESS } from \"../reducers/post/actions\";\nimport axios from \"axios\";\n\nfunction makePostAPI(data) {\n  return axios.post(\"/post\", data, {\n    withCredentials: true\n  });\n}\n\nfunction* makePost(action) {\n  try {\n    const Post = yield call(makePostAPI, action.payload);\n    yield put({\n      type: MAKE_POST_SUCCESS,\n      result: {\n        body: Post.data.post,\n        nickname: Post.data.nickname,\n        date: Post.data.date,\n        title: Post.data.title,\n        _id: Post.data._id\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: MAKE_POST_FAILURE,\n      error: e.response\n    });\n  }\n}\n\nfunction* watchMakePost() {\n  yield takeLatest(MAKE_POST_REQUEST, makePost);\n}\n\nfunction getPostsAPI() {\n  return axios.get(\"/posts\", {\n    withCredentials: true\n  });\n}\n\nfunction* getPosts() {\n  try {\n    const Posts = yield call(getPostsAPI);\n    yield put({\n      type: GET_POSTS_SUCCESS,\n      result: Posts.data.postLists\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: GET_POSTS_FAILURE,\n      error: e.response\n    });\n  }\n}\n\nfunction* watchGetPosts() {\n  yield takeLatest(GET_POSTS_REQUEST, getPosts);\n}\n\nfunction getPostAPI(data) {\n  const {\n    category,\n    title\n  } = data;\n  return axios.get(`/post/category/title/${category}/${title}`);\n}\n\nfunction* getPost(action) {\n  try {\n    const Post = yield call(getPostAPI, action.payload);\n    yield put({\n      type: GET_POST_SUCCESS,\n      result: Post.data.post\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: GET_POST_FAILURE,\n      error: e.response\n    });\n  }\n}\n\nfunction* watchGetPost() {\n  yield takeLatest(GET_POST_REQUEST, getPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchMakePost), fork(watchGetPosts), fork(watchGetPost)]);\n}","map":{"version":3,"sources":["D:/webdev/web_blog/front/sagas/post.ts"],"names":["all","fork","takeLatest","put","call","MAKE_POST_REQUEST","MAKE_POST_SUCCESS","MAKE_POST_FAILURE","GET_POSTS_REQUEST","GET_POSTS_SUCCESS","GET_POSTS_FAILURE","GET_POST_REQUEST","GET_POST_FAILURE","GET_POST_SUCCESS","axios","makePostAPI","data","post","withCredentials","makePost","action","Post","payload","type","result","body","nickname","date","title","_id","e","console","error","response","watchMakePost","getPostsAPI","get","getPosts","Posts","postLists","watchGetPosts","getPostAPI","category","getPost","watchGetPost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\r\nimport {\r\n  MAKE_POST_REQUEST,\r\n  MAKE_POST_SUCCESS,\r\n  MAKE_POST_FAILURE,\r\n  GET_POSTS_REQUEST,\r\n  GET_POSTS_SUCCESS,\r\n  GET_POSTS_FAILURE,\r\n  GET_POST_REQUEST,\r\n  GET_POST_FAILURE,\r\n  GET_POST_SUCCESS\r\n} from \"../reducers/post/actions\";\r\nimport axios from \"axios\";\r\n\r\nfunction makePostAPI(data) {\r\n  return axios.post(\"/post\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* makePost(action) {\r\n  try {\r\n    const Post = yield call(makePostAPI, action.payload);\r\n    yield put({\r\n      type: MAKE_POST_SUCCESS,\r\n      result: {\r\n        body: Post.data.post,\r\n        nickname: Post.data.nickname,\r\n        date: Post.data.date,\r\n        title: Post.data.title,\r\n        _id: Post.data._id\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: MAKE_POST_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchMakePost() {\r\n  yield takeLatest(MAKE_POST_REQUEST, makePost);\r\n}\r\n\r\nfunction getPostsAPI() {\r\n  return axios.get(\"/posts\", {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* getPosts() {\r\n  try {\r\n    const Posts = yield call(getPostsAPI);\r\n    yield put({\r\n      type: GET_POSTS_SUCCESS,\r\n      result: Posts.data.postLists\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: GET_POSTS_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchGetPosts() {\r\n  yield takeLatest(GET_POSTS_REQUEST, getPosts);\r\n}\r\n\r\nfunction getPostAPI(data) {\r\n  const { category, title } = data;\r\n  return axios.get(`/post/category/title/${category}/${title}`);\r\n}\r\n\r\nfunction* getPost(action) {\r\n  try {\r\n    const Post = yield call(getPostAPI, action.payload);\r\n    yield put({\r\n      type: GET_POST_SUCCESS,\r\n      result: Post.data.post\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: GET_POST_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchGetPost() {\r\n  yield takeLatest(GET_POST_REQUEST, getPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchMakePost), fork(watchGetPosts), fork(watchGetPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}