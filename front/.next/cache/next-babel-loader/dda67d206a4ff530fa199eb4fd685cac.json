{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"D:\\\\webdev\\\\web_blog\\\\front\\\\Components\\\\draft\\\\renderer.config.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\n/**\r\n *  You can use inline styles or classNames inside your callbacks\r\n */\n\nvar styles = {\n  code: {\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  },\n  codeBlock: {\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 20\n  }\n}; // just a helper to add a <br /> after a block\n\nvar addBreaklines = function addBreaklines(children) {\n  return children.map(function (child) {\n    return [child, __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    })];\n  });\n};\n/**\r\n * Define the renderers\r\n */\n\n\nexport var renderers = {\n  /**\r\n   * Those callbacks will be called recursively to render a nested structure\r\n   */\n  inline: {\n    // The key passed here is just an index based on rendering order inside a block\n    BOLD: function BOLD(children, _ref) {\n      var key = _ref.key;\n      return __jsx(\"strong\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, children);\n    },\n    ITALIC: function ITALIC(children, _ref2) {\n      var key = _ref2.key;\n      return __jsx(\"em\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, children);\n    },\n    UNDERLINE: function UNDERLINE(children, _ref3) {\n      var key = _ref3.key;\n      return __jsx(\"u\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, children);\n    },\n    CODE: function CODE(children, _ref4) {\n      var key = _ref4.key;\n      return __jsx(\"span\", {\n        key: key,\n        style: styles.code,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, children);\n    }\n  },\n\n  /**\r\n   * Blocks receive children and depth\r\n   * Note that children are an array of blocks with same styling,\r\n   */\n  blocks: {\n    unstyled: function unstyled(children) {\n      return children.map(function (child) {\n        return __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, child);\n      });\n    },\n    blockquote: function blockquote(children) {\n      return __jsx(\"blockquote\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, addBreaklines(children));\n    },\n    \"header-one\": function headerOne(children) {\n      return children.map(function (child) {\n        return __jsx(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, child);\n      });\n    },\n    \"header-two\": function headerTwo(children) {\n      return children.map(function (child) {\n        return __jsx(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, child);\n      });\n    },\n    // You can also access the original keys of the blocks\n    \"code-block\": function codeBlock(children, _ref5) {\n      var keys = _ref5.keys;\n      return __jsx(\"pre\", {\n        style: styles.codeBlock,\n        key: keys[0],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, addBreaklines(children));\n    },\n    // or depth for nested lists\n    \"unordered-list-item\": function unorderedListItem(children, _ref6) {\n      var depth = _ref6.depth,\n          keys = _ref6.keys;\n      return __jsx(\"ul\", {\n        key: keys[keys.length - 1],\n        className: \"ul-level-\".concat(depth),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, children.map(function (child) {\n        return __jsx(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, child);\n      }));\n    },\n    \"ordered-list-item\": function orderedListItem(children, _ref7) {\n      var depth = _ref7.depth,\n          keys = _ref7.keys;\n      return __jsx(\"ol\", {\n        key: keys.join(\"|\"),\n        className: \"ol-level-\".concat(depth),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, children.map(function (child, index) {\n        return __jsx(\"li\", {\n          key: keys[index],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, child);\n      }));\n    },\n    // If your blocks use meta data it can also be accessed like keys\n    atomic: function atomic(children, _ref8) {\n      var keys = _ref8.keys,\n          data = _ref8.data;\n      return children.map(function (child, i) {\n        return __jsx(Atomic, _extends({\n          key: keys[i]\n        }, data[i], {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }));\n      });\n    }\n  },\n\n  /**\r\n   * Entities receive children and the entity data\r\n   */\n  entities: {\n    // key is the entity key value from raw\n    LINK: function LINK(children, data, _ref9) {\n      var key = _ref9.key;\n      return __jsx(Link, {\n        key: key,\n        to: data.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, children);\n    }\n  },\n\n  /**\r\n   * Array of decorators,\r\n   * Entities receive children and the entity data,\r\n   * inspired by https://facebook.github.io/draft-js/docs/advanced-topics-decorators.html\r\n   * it's also possible to pass a custom Decorator class that matches the [DraftDecoratorType](https://github.com/facebook/draft-js/blob/master/src/model/decorators/DraftDecoratorType.js)\r\n   */\n  decorators: [{\n    // by default linkStrategy receives a ContentBlock stub (more info under Creating the ContentBlock)\n    // strategy only receives first two arguments, contentState is yet not provided\n    strategy: linkStrategy,\n    // component - a callback as with other renderers\n    // decoratedText a plain string matched by the strategy\n    // if your decorator depends on draft-js contentState you need to provide convertFromRaw in redraft options\n    component: function component(_ref10) {\n      var children = _ref10.children,\n          decoratedText = _ref10.decoratedText;\n      return __jsx(\"a\", {\n        href: decoratedText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, children);\n    }\n  }, new CustomDecorator(someOptions)]\n};","map":{"version":3,"sources":["D:/webdev/web_blog/front/Components/draft/renderer.config.js"],"names":["React","styles","code","backgroundColor","fontFamily","fontSize","padding","codeBlock","addBreaklines","children","map","child","renderers","inline","BOLD","key","ITALIC","UNDERLINE","CODE","blocks","unstyled","blockquote","keys","depth","length","join","index","atomic","data","i","entities","LINK","url","decorators","strategy","linkStrategy","component","decoratedText","CustomDecorator","someOptions"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n *  You can use inline styles or classNames inside your callbacks\r\n */\r\nconst styles = {\r\n  code: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\r\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n    fontSize: 16,\r\n    padding: 2\r\n  },\r\n  codeBlock: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\r\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n    fontSize: 16,\r\n    padding: 20\r\n  }\r\n};\r\n\r\n// just a helper to add a <br /> after a block\r\nconst addBreaklines = children => children.map(child => [child, <br />]);\r\n\r\n/**\r\n * Define the renderers\r\n */\r\nexport const renderers = {\r\n  /**\r\n   * Those callbacks will be called recursively to render a nested structure\r\n   */\r\n  inline: {\r\n    // The key passed here is just an index based on rendering order inside a block\r\n    BOLD: (children, { key }) => <strong key={key}>{children}</strong>,\r\n    ITALIC: (children, { key }) => <em key={key}>{children}</em>,\r\n    UNDERLINE: (children, { key }) => <u key={key}>{children}</u>,\r\n    CODE: (children, { key }) => (\r\n      <span key={key} style={styles.code}>\r\n        {children}\r\n      </span>\r\n    )\r\n  },\r\n  /**\r\n   * Blocks receive children and depth\r\n   * Note that children are an array of blocks with same styling,\r\n   */\r\n  blocks: {\r\n    unstyled: children => children.map(child => <p>{child}</p>),\r\n    blockquote: children => <blockquote>{addBreaklines(children)}</blockquote>,\r\n    \"header-one\": children => children.map(child => <h1>{child}</h1>),\r\n    \"header-two\": children => children.map(child => <h2>{child}</h2>),\r\n    // You can also access the original keys of the blocks\r\n    \"code-block\": (children, { keys }) => (\r\n      <pre style={styles.codeBlock} key={keys[0]}>\r\n        {addBreaklines(children)}\r\n      </pre>\r\n    ),\r\n    // or depth for nested lists\r\n    \"unordered-list-item\": (children, { depth, keys }) => (\r\n      <ul key={keys[keys.length - 1]} className={`ul-level-${depth}`}>\r\n        {children.map(child => (\r\n          <li>{child}</li>\r\n        ))}\r\n      </ul>\r\n    ),\r\n    \"ordered-list-item\": (children, { depth, keys }) => (\r\n      <ol key={keys.join(\"|\")} className={`ol-level-${depth}`}>\r\n        {children.map((child, index) => (\r\n          <li key={keys[index]}>{child}</li>\r\n        ))}\r\n      </ol>\r\n    ),\r\n    // If your blocks use meta data it can also be accessed like keys\r\n    atomic: (children, { keys, data }) =>\r\n      children.map((child, i) => <Atomic key={keys[i]} {...data[i]} />)\r\n  },\r\n  /**\r\n   * Entities receive children and the entity data\r\n   */\r\n  entities: {\r\n    // key is the entity key value from raw\r\n    LINK: (children, data, { key }) => (\r\n      <Link key={key} to={data.url}>\r\n        {children}\r\n      </Link>\r\n    )\r\n  },\r\n  /**\r\n   * Array of decorators,\r\n   * Entities receive children and the entity data,\r\n   * inspired by https://facebook.github.io/draft-js/docs/advanced-topics-decorators.html\r\n   * it's also possible to pass a custom Decorator class that matches the [DraftDecoratorType](https://github.com/facebook/draft-js/blob/master/src/model/decorators/DraftDecoratorType.js)\r\n   */\r\n  decorators: [\r\n    {\r\n      // by default linkStrategy receives a ContentBlock stub (more info under Creating the ContentBlock)\r\n      // strategy only receives first two arguments, contentState is yet not provided\r\n      strategy: linkStrategy,\r\n      // component - a callback as with other renderers\r\n      // decoratedText a plain string matched by the strategy\r\n      // if your decorator depends on draft-js contentState you need to provide convertFromRaw in redraft options\r\n      component: ({ children, decoratedText }) => (\r\n        <a href={decoratedText}>{children}</a>\r\n      )\r\n    },\r\n    new CustomDecorator(someOptions)\r\n  ]\r\n};\r\n"]},"metadata":{},"sourceType":"module"}