{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\web_blog\\\\front\\\\Components\\\\draft\\\\renderer.config.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport redraft, { createStylesRenderer, createBlockRenderer } from \"redraft\";\nvar styleMap = {\n  BOLD: {\n    fontWeight: \"bold\"\n  },\n  ITALIC: {\n    fontStyle: \"italic\"\n  },\n  UNDERLINE: {\n    textDecoration: \"underline\"\n  }\n}; // This is a wrapper callback for the inline styles\n// the style object contains all the relevant styles from the styleMap\n// it needs a key as redraft returns arrays not Components\n\nvar InlineWrapper = function InlineWrapper(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      key = _ref.key;\n  return __jsx(\"span\", {\n    key: key,\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, children);\n}; // this Component results in a flatter output as it can have multiple styles (also possibly less semantic)\n// Api aligned w draft-js, aliasedElements are not required as draft-js uses them for parsing pasted html\n\n\nvar blockRenderMap = {\n  unstyled: {\n    element: \"div\"\n  },\n  blockquote: {\n    element: \"blockquote\"\n  },\n  \"ordered-list-item\": {\n    element: \"li\",\n    wrapper: \"ol\"\n  },\n  \"unordered-list-item\": {\n    element: \"li\",\n    wrapper: \"ul\"\n  }\n};\nexport var renderers = {\n  // note the styles key and createStylesRenderer helper\n  styles: createStylesRenderer(InlineWrapper, styleMap),\n  blocks: createBlockRenderer(React.createElement, blockRenderMap)\n};","map":{"version":3,"sources":["D:/webdev/web_blog/front/Components/draft/renderer.config.js"],"names":["React","redraft","createStylesRenderer","createBlockRenderer","styleMap","BOLD","fontWeight","ITALIC","fontStyle","UNDERLINE","textDecoration","InlineWrapper","children","style","key","blockRenderMap","unstyled","element","blockquote","wrapper","renderers","styles","blocks","createElement"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,IAAkBC,oBAAlB,EAAwCC,mBAAxC,QAAmE,SAAnE;AAEA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAE;AADR,GADS;AAIfC,EAAAA,MAAM,EAAE;AACNC,IAAAA,SAAS,EAAE;AADL,GAJO;AAOfC,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EAAE;AADP;AAPI,CAAjB,C,CAYA;AACA;AACA;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,KAAb,QAAaA,KAAb;AAAA,MAAoBC,GAApB,QAAoBA,GAApB;AAAA,SACpB;AAAM,IAAA,GAAG,EAAEA,GAAX;AAAgB,IAAA,KAAK,EAAED,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CADoB;AAAA,CAAtB,C,CAKA;AAEA;;;AACA,IAAMG,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE;AADD,GADW;AAIrBC,EAAAA,UAAU,EAAE;AACVD,IAAAA,OAAO,EAAE;AADC,GAJS;AAOrB,uBAAqB;AACnBA,IAAAA,OAAO,EAAE,IADU;AAEnBE,IAAAA,OAAO,EAAE;AAFU,GAPA;AAWrB,yBAAuB;AACrBF,IAAAA,OAAO,EAAE,IADY;AAErBE,IAAAA,OAAO,EAAE;AAFY;AAXF,CAAvB;AAiBA,OAAO,IAAMC,SAAS,GAAG;AACvB;AACAC,EAAAA,MAAM,EAAEnB,oBAAoB,CAACS,aAAD,EAAgBP,QAAhB,CAFL;AAGvBkB,EAAAA,MAAM,EAAEnB,mBAAmB,CAACH,KAAK,CAACuB,aAAP,EAAsBR,cAAtB;AAHJ,CAAlB","sourcesContent":["import React from \"react\";\r\nimport redraft, { createStylesRenderer, createBlockRenderer } from \"redraft\";\r\n\r\nconst styleMap = {\r\n  BOLD: {\r\n    fontWeight: \"bold\"\r\n  },\r\n  ITALIC: {\r\n    fontStyle: \"italic\"\r\n  },\r\n  UNDERLINE: {\r\n    textDecoration: \"underline\"\r\n  }\r\n};\r\n\r\n// This is a wrapper callback for the inline styles\r\n// the style object contains all the relevant styles from the styleMap\r\n// it needs a key as redraft returns arrays not Components\r\nconst InlineWrapper = ({ children, style, key }) => (\r\n  <span key={key} style={style}>\r\n    {children}\r\n  </span>\r\n);\r\n// this Component results in a flatter output as it can have multiple styles (also possibly less semantic)\r\n\r\n// Api aligned w draft-js, aliasedElements are not required as draft-js uses them for parsing pasted html\r\nconst blockRenderMap = {\r\n  unstyled: {\r\n    element: \"div\"\r\n  },\r\n  blockquote: {\r\n    element: \"blockquote\"\r\n  },\r\n  \"ordered-list-item\": {\r\n    element: \"li\",\r\n    wrapper: \"ol\"\r\n  },\r\n  \"unordered-list-item\": {\r\n    element: \"li\",\r\n    wrapper: \"ul\"\r\n  }\r\n};\r\n\r\nexport const renderers = {\r\n  // note the styles key and createStylesRenderer helper\r\n  styles: createStylesRenderer(InlineWrapper, styleMap),\r\n  blocks: createBlockRenderer(React.createElement, blockRenderMap)\r\n};\r\n"]},"metadata":{},"sourceType":"module"}