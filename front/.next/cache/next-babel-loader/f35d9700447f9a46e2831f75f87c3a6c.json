{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOGIN_REQUEST } from \"../reducers/user/actions\";\n\nfunction loginAPI(data) {\n  return axios.post(\"/user\", data, {\n    withCredentials: true\n  });\n}\n\nfunction login(action) {\n  var User;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI, action.payload);\n\n        case 3:\n          User = _context.sent;\n          _context.next = 9;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 6]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOGIN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["D:/webdev/web_blog/front/sagas/user.ts"],"names":["login","watchLogin","userSaga","all","fork","takeLatest","call","axios","LOGIN_REQUEST","loginAPI","data","post","withCredentials","action","payload","User","console","error"],"mappings":";;;;yBAWUA,K;;;yBAQAC,U;;;yBAIeC,Q;;AAvBzB,SAASC,GAAT,EAAcC,IAAd,EAAyBC,UAAzB,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,QAA8B,0BAA9B;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOH,KAAK,CAACI,IAAN,CAAW,OAAX,EAAoBD,IAApB,EAA0B;AAC/BE,IAAAA,eAAe,EAAE;AADc,GAA1B,CAAP;AAGD;;AAED,SAAUZ,KAAV,CAAgBa,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMP,IAAI,CAACG,QAAD,EAAWI,MAAM,CAACC,OAAlB,CAAV;;AAFjB;AAEUC,UAAAA,IAFV;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIIC,UAAAA,OAAO,CAACC,KAAR;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAUhB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,UAAU,CAACG,aAAD,EAAgBR,KAAhB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,UAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport { loginRequestAction } from \"../reducers/user/types\";\r\nimport { LOGIN_REQUEST } from \"../reducers/user/actions\";\r\n\r\nfunction loginAPI(data) {\r\n  return axios.post(\"/user\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* login(action: loginRequestAction) {\r\n  try {\r\n    const User = yield call(loginAPI, action.payload);\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOGIN_REQUEST, login);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}