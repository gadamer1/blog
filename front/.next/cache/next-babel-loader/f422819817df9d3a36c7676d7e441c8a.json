{"ast":null,"code":"import produce from \"immer\";\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, GET_USER_BY_NICKNAME_REQUEST, GET_USER_BY_NICKNAME_SUCCESS, GET_USER_BY_NICKNAME_FAILURE } from \"./actions\";\n\n/*INITIAL STATE */\nvar initialState = {\n  me: null,\n  userInfo: null,\n  loadingStates: {\n    isLoging: false,\n    isSigning: false,\n    isLogouting: false,\n    isLoadingUser: false\n  },\n  metaStates: {\n    isLoggedIn: false,\n    loginStautsCode: 0,\n    signUpStatusCode: 0\n  }\n};\nvar mockUser = {\n  nickname: \"gadamer\",\n  emailVerified: false\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOGIN_REQUEST:\n        {\n          draft.loadingStates.isLoging = true;\n          break;\n        }\n\n      case LOGIN_SUCCESS:\n        {\n          draft.loadingStates.isLoging = false;\n          draft.metaStates.loginStautsCode = 200;\n          draft.metaStates.isLoggedIn = true;\n          draft.me = action.result.user;\n          document.cookie = \"X-Access-Token=\".concat(action.result.X - Access - Token);\n          break;\n        }\n\n      case LOGIN_FAILURE:\n        {\n          draft.loadingStates.isLoging = false;\n          draft.metaStates.loginStautsCode = action.errorCode;\n          draft.metaStates.isLoggedIn = false;\n        }\n\n      case SIGN_UP_REQUEST:\n        {\n          draft.loadingStates.isSigning = true;\n          break;\n        }\n\n      case SIGN_UP_SUCCESS:\n        {\n          draft.loadingStates.isSigning = false;\n          draft.me = action.result.user;\n          draft.metaStates.isLoggedIn = true;\n          break;\n        }\n\n      case SIGN_UP_FAILURE:\n        {\n          draft.loadingStates.isSigning = false;\n          draft.metaStates.signUpStatusCode = action.errorCode;\n          draft.metaStates.isLoggedIn = false;\n          break;\n        }\n      // 로그아웃\n\n      case LOG_OUT_REQUEST:\n        {\n          draft.loadingStates.isLogouting = true;\n        }\n\n      case LOG_OUT_SUCCESS:\n        {\n          draft.me = null;\n          draft.loadingStates.isLogouting = false;\n          draft.metaStates.isLoggedIn = false;\n        }\n\n      case LOG_OUT_FAILURE:\n        {\n          draft.loadingStates.isLogouting = false;\n        }\n      // 회원정보 가져오기\n\n      case LOAD_USER_REQUEST:\n        {\n          break;\n        }\n\n      case LOAD_USER_SUCCESS:\n        {\n          draft.me = action.result.user;\n          draft.metaStates.isLoggedIn = true;\n          break;\n        }\n\n      case LOAD_USER_FAILURE:\n        {\n          draft.metaStates.isLoggedIn = false;\n          draft.me = null;\n          break;\n        }\n\n      case GET_USER_BY_NICKNAME_REQUEST:\n        {\n          draft.loadingStates.isLoadingUser = true;\n        }\n\n      case GET_USER_BY_NICKNAME_SUCCESS:\n        {\n          draft.loadingStates.isLoadingUser = false; // @ts-ignore\n\n          draft.userInfo = action.result;\n        }\n\n      case GET_USER_BY_NICKNAME_FAILURE:\n        {\n          draft.loadingStates.isLoadingUser = false;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  });\n});","map":{"version":3,"sources":["D:/webdev/blog/front/reducers/user/index.ts"],"names":["produce","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","GET_USER_BY_NICKNAME_REQUEST","GET_USER_BY_NICKNAME_SUCCESS","GET_USER_BY_NICKNAME_FAILURE","initialState","me","userInfo","loadingStates","isLoging","isSigning","isLogouting","isLoadingUser","metaStates","isLoggedIn","loginStautsCode","signUpStatusCode","mockUser","nickname","emailVerified","state","action","draft","type","result","user","document","cookie","X","Access","Token","errorCode"],"mappings":"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","sourcesContent":["import produce from \"immer\";\r\nimport {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  LOAD_USER_REQUEST,\r\n  LOAD_USER_SUCCESS,\r\n  LOAD_USER_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  GET_USER_BY_NICKNAME_REQUEST,\r\n  GET_USER_BY_NICKNAME_SUCCESS,\r\n  GET_USER_BY_NICKNAME_FAILURE\r\n} from \"./actions\";\r\nimport { userActions, userStore } from \"./interfaces\";\r\n\r\n/*INITIAL STATE */\r\nconst initialState: userStore = {\r\n  me: null,\r\n  userInfo: null,\r\n  loadingStates: {\r\n    isLoging: false,\r\n    isSigning: false,\r\n    isLogouting: false,\r\n    isLoadingUser: false\r\n  },\r\n  metaStates: {\r\n    isLoggedIn: false,\r\n    loginStautsCode: 0,\r\n    signUpStatusCode: 0\r\n  }\r\n};\r\n\r\nconst mockUser = {\r\n  nickname: \"gadamer\",\r\n  emailVerified: false\r\n};\r\n\r\nexport default (state = initialState, action: userActions) => {\r\n  return produce(state, draft => {\r\n    switch (action.type) {\r\n      case LOGIN_REQUEST: {\r\n        draft.loadingStates.isLoging = true;\r\n        break;\r\n      }\r\n      case LOGIN_SUCCESS: {\r\n        draft.loadingStates.isLoging = false;\r\n        draft.metaStates.loginStautsCode = 200;\r\n        draft.metaStates.isLoggedIn = true;\r\n        draft.me = action.result.user;\r\n        document.cookie = `X-Access-Token=${action.result.X - Access - Token}`;\r\n        break;\r\n      }\r\n      case LOGIN_FAILURE: {\r\n        draft.loadingStates.isLoging = false;\r\n        draft.metaStates.loginStautsCode = action.errorCode;\r\n        draft.metaStates.isLoggedIn = false;\r\n      }\r\n      case SIGN_UP_REQUEST: {\r\n        draft.loadingStates.isSigning = true;\r\n        break;\r\n      }\r\n      case SIGN_UP_SUCCESS: {\r\n        draft.loadingStates.isSigning = false;\r\n        draft.me = action.result.user;\r\n        draft.metaStates.isLoggedIn = true;\r\n        break;\r\n      }\r\n      case SIGN_UP_FAILURE: {\r\n        draft.loadingStates.isSigning = false;\r\n        draft.metaStates.signUpStatusCode = action.errorCode;\r\n        draft.metaStates.isLoggedIn = false;\r\n        break;\r\n      }\r\n      // 로그아웃\r\n      case LOG_OUT_REQUEST: {\r\n        draft.loadingStates.isLogouting = true;\r\n      }\r\n      case LOG_OUT_SUCCESS: {\r\n        draft.me = null;\r\n        draft.loadingStates.isLogouting = false;\r\n        draft.metaStates.isLoggedIn = false;\r\n      }\r\n      case LOG_OUT_FAILURE: {\r\n        draft.loadingStates.isLogouting = false;\r\n      }\r\n\r\n      // 회원정보 가져오기\r\n\r\n      case LOAD_USER_REQUEST: {\r\n        break;\r\n      }\r\n      case LOAD_USER_SUCCESS: {\r\n        draft.me = action.result.user;\r\n\r\n        draft.metaStates.isLoggedIn = true;\r\n        break;\r\n      }\r\n      case LOAD_USER_FAILURE: {\r\n        draft.metaStates.isLoggedIn = false;\r\n        draft.me = null;\r\n        break;\r\n      }\r\n\r\n      case GET_USER_BY_NICKNAME_REQUEST: {\r\n        draft.loadingStates.isLoadingUser = true;\r\n      }\r\n      case GET_USER_BY_NICKNAME_SUCCESS: {\r\n        draft.loadingStates.isLoadingUser = false;\r\n        // @ts-ignore\r\n        draft.userInfo = action.result;\r\n      }\r\n      case GET_USER_BY_NICKNAME_FAILURE: {\r\n        draft.loadingStates.isLoadingUser = false;\r\n      }\r\n\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}