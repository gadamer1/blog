{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"D:\\\\webdev\\\\web_blog\\\\front\\\\Components\\\\draft\\\\Renderer.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\n/**\r\n *  You can use inline styles or classNames inside your callbacks\r\n */\n\nconst styles = {\n  code: {\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  },\n  codeBlock: {\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 20\n  }\n}; // just a helper to add a <br /> after a block\n\nconst addBreaklines = children => children.map(child => [child, __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n})]);\n/**\r\n * Define the renderers\r\n */\n\n\nconst renderers = {\n  /**\r\n   * Those callbacks will be called recursively to render a nested structure\r\n   */\n  inline: {\n    // The key passed here is just an index based on rendering order inside a block\n    BOLD: (children, {\n      key\n    }) => __jsx(\"strong\", {\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, children),\n    ITALIC: (children, {\n      key\n    }) => __jsx(\"em\", {\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, children),\n    UNDERLINE: (children, {\n      key\n    }) => __jsx(\"u\", {\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, children),\n    CODE: (children, {\n      key\n    }) => __jsx(\"span\", {\n      key: key,\n      style: styles.code,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, children)\n  },\n\n  /**\r\n   * Blocks receive children and depth\r\n   * Note that children are an array of blocks with same styling,\r\n   */\n  blocks: {\n    unstyled: children => children.map(child => __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, child)),\n    blockquote: children => __jsx(\"blockquote\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, addBreaklines(children)),\n    \"header-one\": children => children.map(child => __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, child)),\n    \"header-two\": children => children.map(child => __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, child)),\n    // You can also access the original keys of the blocks\n    \"code-block\": (children, {\n      keys\n    }) => __jsx(\"pre\", {\n      style: styles.codeBlock,\n      key: keys[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, addBreaklines(children)),\n    // or depth for nested lists\n    \"unordered-list-item\": (children, {\n      depth,\n      keys\n    }) => __jsx(\"ul\", {\n      key: keys[keys.length - 1],\n      className: `ul-level-${depth}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, children.map(child => __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, child))),\n    \"ordered-list-item\": (children, {\n      depth,\n      keys\n    }) => __jsx(\"ol\", {\n      key: keys.join(\"|\"),\n      className: `ol-level-${depth}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, children.map((child, index) => __jsx(\"li\", {\n      key: keys[index],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, child))),\n    // If your blocks use meta data it can also be accessed like keys\n    atomic: (children, {\n      keys,\n      data\n    }) => children.map((child, i) => __jsx(Atomic, _extends({\n      key: keys[i]\n    }, data[i], {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })))\n  },\n\n  /**\r\n   * Entities receive children and the entity data\r\n   */\n  entities: {\n    // key is the entity key value from raw\n    LINK: (children, data, {\n      key\n    }) => __jsx(Link, {\n      key: key,\n      to: data.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, children)\n  },\n\n  /**\r\n   * Array of decorators,\r\n   * Entities receive children and the entity data,\r\n   * inspired by https://facebook.github.io/draft-js/docs/advanced-topics-decorators.html\r\n   * it's also possible to pass a custom Decorator class that matches the [DraftDecoratorType](https://github.com/facebook/draft-js/blob/master/src/model/decorators/DraftDecoratorType.js)\r\n   */\n  decorators: [{\n    // by default linkStrategy receives a ContentBlock stub (more info under Creating the ContentBlock)\n    // strategy only receives first two arguments, contentState is yet not provided\n    strategy: linkStrategy,\n    // component - a callback as with other renderers\n    // decoratedText a plain string matched by the strategy\n    // if your decorator depends on draft-js contentState you need to provide convertFromRaw in redraft options\n    component: ({\n      children,\n      decoratedText\n    }) => __jsx(\"a\", {\n      href: decoratedText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, children)\n  }, new CustomDecorator(someOptions)]\n};\nexport default class Renderer extends Component {\n  renderWarning() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Nothing to render.\");\n  }\n\n  render() {\n    const {\n      raw\n    } = this.props;\n\n    if (!raw) {\n      return this.renderWarning();\n    }\n\n    const rendered = redraft(raw, renderers); // redraft returns a null if there's nothing to render\n\n    if (!rendered) {\n      return this.renderWarning();\n    }\n\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, rendered);\n  }\n\n}\n\n_defineProperty(Renderer, \"propTypes\", {\n  raw: PropTypes.object\n});","map":{"version":3,"sources":["D:/webdev/web_blog/front/Components/draft/Renderer.js"],"names":["React","Component","styles","code","backgroundColor","fontFamily","fontSize","padding","codeBlock","addBreaklines","children","map","child","renderers","inline","BOLD","key","ITALIC","UNDERLINE","CODE","blocks","unstyled","blockquote","keys","depth","length","join","index","atomic","data","i","entities","LINK","url","decorators","strategy","linkStrategy","component","decoratedText","CustomDecorator","someOptions","Renderer","renderWarning","render","raw","props","rendered","redraft","PropTypes","object"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n/**\r\n *  You can use inline styles or classNames inside your callbacks\r\n */\r\nconst styles = {\r\n  code: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\r\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n    fontSize: 16,\r\n    padding: 2\r\n  },\r\n  codeBlock: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\r\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n    fontSize: 16,\r\n    padding: 20\r\n  }\r\n};\r\n\r\n// just a helper to add a <br /> after a block\r\nconst addBreaklines = children => children.map(child => [child, <br />]);\r\n\r\n/**\r\n * Define the renderers\r\n */\r\nconst renderers = {\r\n  /**\r\n   * Those callbacks will be called recursively to render a nested structure\r\n   */\r\n  inline: {\r\n    // The key passed here is just an index based on rendering order inside a block\r\n    BOLD: (children, { key }) => <strong key={key}>{children}</strong>,\r\n    ITALIC: (children, { key }) => <em key={key}>{children}</em>,\r\n    UNDERLINE: (children, { key }) => <u key={key}>{children}</u>,\r\n    CODE: (children, { key }) => (\r\n      <span key={key} style={styles.code}>\r\n        {children}\r\n      </span>\r\n    )\r\n  },\r\n  /**\r\n   * Blocks receive children and depth\r\n   * Note that children are an array of blocks with same styling,\r\n   */\r\n  blocks: {\r\n    unstyled: children => children.map(child => <p>{child}</p>),\r\n    blockquote: children => <blockquote>{addBreaklines(children)}</blockquote>,\r\n    \"header-one\": children => children.map(child => <h1>{child}</h1>),\r\n    \"header-two\": children => children.map(child => <h2>{child}</h2>),\r\n    // You can also access the original keys of the blocks\r\n    \"code-block\": (children, { keys }) => (\r\n      <pre style={styles.codeBlock} key={keys[0]}>\r\n        {addBreaklines(children)}\r\n      </pre>\r\n    ),\r\n    // or depth for nested lists\r\n    \"unordered-list-item\": (children, { depth, keys }) => (\r\n      <ul key={keys[keys.length - 1]} className={`ul-level-${depth}`}>\r\n        {children.map(child => (\r\n          <li>{child}</li>\r\n        ))}\r\n      </ul>\r\n    ),\r\n    \"ordered-list-item\": (children, { depth, keys }) => (\r\n      <ol key={keys.join(\"|\")} className={`ol-level-${depth}`}>\r\n        {children.map((child, index) => (\r\n          <li key={keys[index]}>{child}</li>\r\n        ))}\r\n      </ol>\r\n    ),\r\n    // If your blocks use meta data it can also be accessed like keys\r\n    atomic: (children, { keys, data }) =>\r\n      children.map((child, i) => <Atomic key={keys[i]} {...data[i]} />)\r\n  },\r\n  /**\r\n   * Entities receive children and the entity data\r\n   */\r\n  entities: {\r\n    // key is the entity key value from raw\r\n    LINK: (children, data, { key }) => (\r\n      <Link key={key} to={data.url}>\r\n        {children}\r\n      </Link>\r\n    )\r\n  },\r\n  /**\r\n   * Array of decorators,\r\n   * Entities receive children and the entity data,\r\n   * inspired by https://facebook.github.io/draft-js/docs/advanced-topics-decorators.html\r\n   * it's also possible to pass a custom Decorator class that matches the [DraftDecoratorType](https://github.com/facebook/draft-js/blob/master/src/model/decorators/DraftDecoratorType.js)\r\n   */\r\n  decorators: [\r\n    {\r\n      // by default linkStrategy receives a ContentBlock stub (more info under Creating the ContentBlock)\r\n      // strategy only receives first two arguments, contentState is yet not provided\r\n      strategy: linkStrategy,\r\n      // component - a callback as with other renderers\r\n      // decoratedText a plain string matched by the strategy\r\n      // if your decorator depends on draft-js contentState you need to provide convertFromRaw in redraft options\r\n      component: ({ children, decoratedText }) => (\r\n        <a href={decoratedText}>{children}</a>\r\n      )\r\n    },\r\n    new CustomDecorator(someOptions)\r\n  ]\r\n};\r\n\r\nexport default class Renderer extends Component {\r\n  static propTypes = {\r\n    raw: PropTypes.object\r\n  };\r\n\r\n  renderWarning() {\r\n    return <div>Nothing to render.</div>;\r\n  }\r\n\r\n  render() {\r\n    const { raw } = this.props;\r\n    if (!raw) {\r\n      return this.renderWarning();\r\n    }\r\n    const rendered = redraft(raw, renderers);\r\n    // redraft returns a null if there's nothing to render\r\n    if (!rendered) {\r\n      return this.renderWarning();\r\n    }\r\n    return <div>{rendered}</div>;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}