{"version":3,"file":"0.js","sources":["webpack:///./Components/admin/MakePosts/MakePostsForm.tsx","webpack:///./node_modules/@babel/runtime-corejs2/core-js/json/stringify.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/promise.js","webpack:///./reducers/post/actions.ts","webpack:///./utils/Components/CircularProgressComponent.tsx"],"sourcesContent":["import React, { Component, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { EditorState, convertToRaw, convertFromRaw } from \"draft-js\";\r\nimport Router from \"next/router\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\n//load editor css\r\nimport \"../../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\n\r\nimport {\r\n  Button,\r\n  Typography,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  FormControl,\r\n  FormLabel,\r\n  FormControlLabel,\r\n  Checkbox\r\n} from \"@material-ui/core\";\r\nimport { store } from \"../../../reducers/types\";\r\nimport CircularProgressComponent from \"../../../utils/Components/CircularProgressComponent\";\r\nimport {\r\n  MAKE_POST_REQUEST,\r\n  MAKE_POST_FAILURE\r\n} from \"../../../reducers/post/actions\";\r\n\r\nfunction uploadImageCallBack(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", \"https://api.imgur.com/3/image\");\r\n    xhr.setRequestHeader(\"Authorization\", \"Client-ID b1e6509aad56ae0\");\r\n    const data = new FormData();\r\n    data.append(\"image\", file);\r\n    xhr.send(data);\r\n    xhr.addEventListener(\"load\", () => {\r\n      const response = JSON.parse(xhr.responseText);\r\n      resolve(response);\r\n    });\r\n    xhr.addEventListener(\"error\", () => {\r\n      const error = JSON.parse(xhr.responseText);\r\n      reject(error);\r\n    });\r\n  });\r\n}\r\n\r\nconst MakePostsForm = () => {\r\n  const [editorState, setEditorState] = useState(\"\");\r\n  const [category, setCategory] = useState(\"dev\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [hidden, setHidden] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { isPosting, isPostingSuccess } = useSelector(\r\n    (state: store) => state.post.loadingStates\r\n  );\r\n  const { _id, nickname } = useSelector((state: store) => state.user.me);\r\n  // 포스팅 완료됐으면 튕구기\r\n  useEffect(() => {\r\n    if (isPostingSuccess) {\r\n      dispatch({\r\n        type: MAKE_POST_FAILURE\r\n      });\r\n      window.localStorage.removeItem(\"category\");\r\n      window.localStorage.removeItem(\"title\");\r\n      window.localStorage.removeItem(\"content\");\r\n\r\n      Router.push(`/post/${category}/${title}`);\r\n    }\r\n  }, [isPostingSuccess]);\r\n  useEffect(() => {\r\n    const content = window.localStorage.getItem(\"content\");\r\n    const title = window.localStorage.getItem(\"title\");\r\n    const category = window.localStorage.getItem(\"category\");\r\n    const hidden = window.localStorage.getItem(\"hidden\");\r\n\r\n    if (content) {\r\n      setEditorState(\r\n        EditorState.createWithContent(convertFromRaw(JSON.parse(content)))\r\n      );\r\n    } else {\r\n      setEditorState(EditorState.createEmpty());\r\n    }\r\n    if (title) {\r\n      setTitle(title);\r\n    } else {\r\n      setTitle(\"\");\r\n    }\r\n    if (category) {\r\n      setCategory(category);\r\n    } else {\r\n      setCategory(\"\");\r\n    }\r\n  }, []);\r\n\r\n  const saveContent = content => {\r\n    window.localStorage.setItem(\r\n      \"content\",\r\n      JSON.stringify(convertToRaw(content))\r\n    );\r\n  };\r\n\r\n  const saveTitle = title => {\r\n    window.localStorage.setItem(\"title\", title);\r\n  };\r\n  const saveCategory = category => {\r\n    window.localStorage.setItem(\"category\", category);\r\n  };\r\n\r\n  const onChangeEditorState: Function = editorState => {\r\n    const contentState = editorState.getCurrentContent();\r\n    saveContent(contentState);\r\n    setEditorState(editorState);\r\n  };\r\n\r\n  const _onClickPostButton = e => {\r\n    if (title.trim() !== \"\") {\r\n      dispatch({\r\n        type: MAKE_POST_REQUEST,\r\n        payload: {\r\n          authorId: _id,\r\n          category,\r\n          // @ts-ignore\r\n          body: JSON.stringify(convertToRaw(editorState.getCurrentContent())),\r\n          title,\r\n          hidden,\r\n          nickname\r\n        }\r\n      });\r\n    }\r\n  };\r\n  const _onCategoryChange = (e: React.ChangeEvent<{ value: string }>) => {\r\n    saveCategory(e.target.value);\r\n    setCategory(e.target.value);\r\n  };\r\n\r\n  const _onChangeTitle = e => {\r\n    saveTitle(e.target.value);\r\n    setTitle(e.target.value);\r\n  };\r\n\r\n  const _onChangeHidden = e => {\r\n    setHidden(e.target.checked);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormControl>\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"제목\"\r\n          variant=\"outlined\"\r\n          value={title}\r\n          onChange={_onChangeTitle}\r\n        />\r\n        <FormLabel component=\"legend\">카테고리</FormLabel>\r\n        <Select value={category} onChange={_onCategoryChange}>\r\n          <MenuItem value=\"dev\">개발</MenuItem>\r\n          <MenuItem value=\"hacking\">해킹</MenuItem>\r\n          <MenuItem value=\"finance\">재테크</MenuItem>\r\n          <MenuItem value=\"business\">비즈니스</MenuItem>\r\n        </Select>\r\n\r\n        <Editor\r\n          //@ts-ignore\r\n          editorState={editorState}\r\n          editorClassName=\"demo-editor\"\r\n          onEditorStateChange={onChangeEditorState}\r\n          localization={{ locale: \"ko\" }}\r\n          toolbar={{\r\n            image: {\r\n              uploadCallback: uploadImageCallBack,\r\n              alt: { present: true, mandatory: true }\r\n            }\r\n          }}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={_onClickPostButton}\r\n          disabled={isPosting}\r\n        >\r\n          {isPosting ? (\r\n            <CircularProgressComponent />\r\n          ) : (\r\n            <Typography>포스팅</Typography>\r\n          )}\r\n        </Button>\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              checked={hidden}\r\n              onChange={_onChangeHidden}\r\n              value={hidden}\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label=\"임시저장\"\r\n        />\r\n      </FormControl>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MakePostsForm;\r\n","module.exports = require(\"core-js/library/fn/json/stringify\");","module.exports = require(\"core-js/library/fn/promise\");","export const MAKE_POST_REQUEST = \"MAKE_POST_REQUEST\" as const;\r\nexport const MAKE_POST_SUCCESS = \"MAKE_POST_SUCCESS\" as const;\r\nexport const MAKE_POST_FAILURE = \"MAKE_POST_FAILURE\" as const;\r\n\r\nexport const GET_POST_REQUEST = \"GET_POST_REQUEST\" as const;\r\nexport const GET_POST_SUCCESS = \"GET_POST_SUCCESS\" as const;\r\nexport const GET_POST_FAILURE = \"GET_POST_FAILURE\" as const;\r\n\r\nexport const GET_POSTS_REQUEST = \"GET_POSTS_REQUEST\" as const;\r\nexport const GET_POSTS_SUCCESS = \"GET_POSTS_SUCCESS\" as const;\r\nexport const GET_POSTS_FAILURE = \"GET_POSTS_FAILURE\" as const;\r\n\r\nexport const FETCH_POST_REQUEST = \"FETCH_POST_REQUEST\" as const;\r\nexport const FETCH_POST_SUCCESS = \"FETCH_POST_SUCCESS\" as const;\r\nexport const FETCH_POST_FAILURE = \"FETCH_POST_FAILURE\" as const;\r\n","import React, { useState, FunctionComponent, useEffect } from \"react\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\nconst CircularProgressComponent: FunctionComponent = () => {\r\n  const [progress, setProgress] = useState(0);\r\n  useEffect(() => {\r\n    function tick() {\r\n      setProgress((oldProgress: number) =>\r\n        oldProgress >= 100 ? 0 : oldProgress + 1\r\n      );\r\n    }\r\n    const timer = setInterval(tick, 20);\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n\r\n  return <CircularProgress variant=\"determinate\" value={progress} />;\r\n};\r\n\r\nexport default CircularProgressComponent;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAYA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AADA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;;;;;;;;;;;AC1MA;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}