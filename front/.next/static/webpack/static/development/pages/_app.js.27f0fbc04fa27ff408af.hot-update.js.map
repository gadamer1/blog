{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.27f0fbc04fa27ff408af.hot-update.js","sources":["webpack:///./pages/_app.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport Head from \"next/head\";\r\nimport withRedux from \"next-redux-wrapper\";\r\nimport withReduxSaga from \"next-redux-saga\";\r\nimport { applyMiddleware, compose, createStore, Store } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension/logOnlyInProduction\";\r\n\r\nimport reducer from \"../reducers\";\r\nimport rootSaga from \"../sagas\";\r\nimport AppLayout from \"../Layouts/AppLayout\";\r\nimport { store } from \"../reducers/types\";\r\nimport { NextPage, NextPageContext } from \"next\";\r\nimport axios from \"axios\";\r\nimport { LOAD_USER_REQUEST } from \"../reducers/user/actions\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\n\r\nconst customTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#212121\",\r\n      light: \"#484848\",\r\n      dark: \"#000000\"\r\n    },\r\n    secondary: {\r\n      main: \"#424242\",\r\n      light: \"#6d6d6d\",\r\n      dark: \"#1b1b1b\"\r\n    }\r\n  }\r\n});\r\n\r\nconst Blog = ({ Component, store, pageProps }) => {\r\n  // for material ui ssr\r\n  useEffect(() => {\r\n    const jssStyles = document.querySelector(\"#jss-server-side\");\r\n    if (jssStyles) {\r\n      jssStyles.parentElement.removeChild(jssStyles);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <Head>\r\n        <title>가다머의 블로그</title>\r\n      </Head>\r\n      <ThemeProvider theme={customTheme}>\r\n        <AppLayout>\r\n          <Component {...pageProps} />\r\n        </AppLayout>\r\n      </ThemeProvider>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nBlog.getInitialProps = async context => {\r\n  let pageProps = {};\r\n  const { ctx, Component } = context;\r\n  const state = ctx.store.getState();\r\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : \"\";\r\n  if (ctx.isServer && cookie) {\r\n    axios.defaults.headers.cookie = cookie;\r\n  }\r\n  if (!state.user.user && cookie) {\r\n    ctx.store.dispatch({\r\n      type: LOAD_USER_REQUEST\r\n    });\r\n  }\r\n  if (Component.getInitialProps) {\r\n    pageProps = await Component.getInitialProps(ctx);\r\n  }\r\n  return { pageProps };\r\n};\r\n\r\n// FOR REDUX DEVTOOLS EXTENSION\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst configureStore = (initialState: store) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware];\r\n  const composeEnhancer = composeWithDevTools({\r\n    // options like actionSanitizer, stateSanitizer\r\n  });\r\n  const enhancer = composeEnhancer(applyMiddleware(...middlewares));\r\n  const store = createStore(reducer, initialState, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nexport default withRedux(configureStore)(withReduxSaga(Blog));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AANA;AADA;AACA;AAcA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAbA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAcA;AACA;AAfA;AAAA;AAgBA;AAAA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAwBA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}