{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.750172b8527bb1beb336.hot-update.js","sources":["webpack:///./sagas/post.ts"],"sourcesContent":["import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\r\nimport {\r\n  MAKE_POST_REQUEST,\r\n  MAKE_POST_SUCCESS,\r\n  MAKE_POST_FAILURE,\r\n  GET_POSTS_REQUEST,\r\n  GET_POSTS_SUCCESS,\r\n  GET_POSTS_FAILURE,\r\n  GET_POST_REQUEST,\r\n  GET_POST_FAILURE,\r\n  GET_POST_SUCCESS,\r\n  FETCH_POST_FAILURE,\r\n  FETCH_POST_SUCCESS,\r\n  FETCH_POST_REQUEST,\r\n  DELETE_POST_REQUEST\r\n} from \"../reducers/post/actions\";\r\nimport axios from \"axios\";\r\n\r\nfunction makePostAPI(data) {\r\n  return axios.post(\"/post\", data, {\r\n    withCredentials: true\r\n  });\r\n}\r\n\r\nfunction* makePost(action) {\r\n  try {\r\n    const Post = yield call(makePostAPI, action.payload);\r\n    yield put({\r\n      type: MAKE_POST_SUCCESS,\r\n      result: {\r\n        body: Post.data.post,\r\n        nickname: Post.data.nickname,\r\n        date: Post.data.date,\r\n        title: Post.data.title,\r\n        _id: Post.data._id\r\n      }\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: MAKE_POST_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchMakePost() {\r\n  yield takeLatest(MAKE_POST_REQUEST, makePost);\r\n}\r\n\r\nfunction getPostsAPI(data) {\r\n  if (data) {\r\n    const { category } = data;\r\n    return axios.get(`/posts/category/${category}`);\r\n  } else {\r\n    return axios.get(\"/posts\", {\r\n      withCredentials: true\r\n    });\r\n  }\r\n}\r\n\r\nfunction* getPosts(action) {\r\n  try {\r\n    const Posts = yield call(getPostsAPI, action.payload);\r\n    yield put({\r\n      type: GET_POSTS_SUCCESS,\r\n      result: Posts.data.postList\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: GET_POSTS_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchGetPosts() {\r\n  yield takeLatest(GET_POSTS_REQUEST, getPosts);\r\n}\r\n\r\nfunction fetchPostAPI(data) {\r\n  return axios.post(`/post/category/title`, data, { withCredentials: true });\r\n}\r\n\r\nfunction* fetchPost(action) {\r\n  try {\r\n    const Post = yield call(fetchPostAPI, action.payload);\r\n    yield put({\r\n      type: FETCH_POST_SUCCESS,\r\n      result: Post.data.post\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: FETCH_POST_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchFetchPost() {\r\n  yield takeLatest(FETCH_POST_REQUEST, fetchPost);\r\n}\r\n\r\nfunction deletePostAPI(data) {\r\n  return axios.delete(`/post`, {\r\n    headers: {},\r\n    data: {\r\n      source: data\r\n    }\r\n  });\r\n}\r\n\r\nfunction* deletePost(action) {\r\n  try {\r\n    const Post = yield call(deletePostAPI, action.payload);\r\n    yield put({\r\n      type: FETCH_POST_SUCCESS,\r\n      result: Post.data.post\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: FETCH_POST_FAILURE,\r\n      error: e.response\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchDeltePost() {\r\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchMakePost),\r\n    fork(watchGetPosts),\r\n    fork(watchFetchPost),\r\n    fork(watchDeltePost)\r\n  ]);\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAwBA;;;AAsBA;;;AAeA;;;AAgBA;;;AAQA;;;AAgBA;;;AAaA;;;AAgBA;;;AAIA;AACA;AAvIA;AACA;AAeA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAcA;AAdA;AAeA;AACA;AACA;AAFA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAGA;AACA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AARA;AASA;AACA;AACA;AAFA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAGA;AACA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AARA;AASA;AACA;AACA;AAFA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAEA;AAFA;AAGA;AACA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AARA;AASA;AACA;AACA;AAFA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}