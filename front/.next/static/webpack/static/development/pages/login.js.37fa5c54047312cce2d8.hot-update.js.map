{"version":3,"file":"static/webpack/static\\development\\pages\\login.js.37fa5c54047312cce2d8.hot-update.js","sources":["webpack:///./pages/login.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { LOGIN_REQUEST } from \"../reducers/user/actions\";\r\nimport { store } from \"../reducers/types\";\r\nimport { useRouter } from \"next/router\";\r\n// loading component\r\nimport CircularProgressComponent from \"../utils/Components/CircularProgressComponent\";\r\n\r\n// validate email\r\nimport validateEmailInput from \"../utils/validateEmailInput\";\r\nimport { NextPageContext, NextPage } from \"next\";\r\nimport IsAleadyLoggedIn from \"../Components/IsAleadyLoggedIn\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\"\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main\r\n    },\r\n    form: {\r\n      width: \"100%\", // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1)\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2)\r\n    }\r\n  })\r\n);\r\n\r\nconst Login = () => {\r\n  const classes = useStyles({});\r\n  const { isLoging } = useSelector((state: store) => state.user.loadingStates);\r\n  const { isLoggedIn } = useSelector((state: store) => state.user.metaStates);\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(\"\");\r\n  const router = useRouter();\r\n  useEffect(() => {\r\n    if (isLoggedIn) {\r\n      router.push(\"/\");\r\n    }\r\n    console.log(\"gi\");\r\n  }, [isLoggedIn]);\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    let validate = true;\r\n    if (!validateEmailInput(email)) {\r\n      setEmailError(\"올바르지 않은 이메일 주소입니다.\");\r\n      validate = false;\r\n    }\r\n    if (email.trim() === \"\") {\r\n      setEmailError(\"이메일 주소를 입력해주세요\");\r\n      validate = false;\r\n    }\r\n    if (password.trim() === \"\") {\r\n      setPasswordError(\"비밀번호를 입력해주세요\");\r\n      validate = false;\r\n    }\r\n    if (validate) {\r\n      dispatch({\r\n        type: LOGIN_REQUEST,\r\n        payload: {\r\n          email,\r\n          password\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (emailError) {\r\n      setEmailError(\"\");\r\n    }\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const handlePassword = event => {\r\n    if (passwordError) {\r\n      setPasswordError(\"\");\r\n    }\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoggedIn ? (\r\n        <IsAleadyLoggedIn />\r\n      ) : (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              로그인\r\n            </Typography>\r\n            <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n              <TextField\r\n                error={!!emailError}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"이메일\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n                value={email}\r\n                onChange={handleEmail}\r\n                helperText={emailError}\r\n              />\r\n              <TextField\r\n                error={!!passwordError}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"비밀번호\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={password}\r\n                onChange={handlePassword}\r\n                helperText={passwordError}\r\n              />\r\n              <FormControlLabel\r\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                label=\"로그인 상태 유지\"\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n                disabled={isLoging}\r\n              >\r\n                {isLoging ? (\r\n                  <CircularProgressComponent />\r\n                ) : (\r\n                  <Typography>로그인</Typography>\r\n                )}\r\n              </Button>\r\n              <Grid container>\r\n                <Grid item xs>\r\n                  <Link href=\"#\" variant=\"body2\">\r\n                    비밀번호를 잊으셨나요?\r\n                  </Link>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Link href=\"/signup\" variant=\"body2\">\r\n                    {\"계정이 없으신가요? 회원가입\"}\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </div>\r\n        </Container>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAFA;AAIA;AACA;AADA;AAfA;AADA;AACA;AAqBA;AACA;AACA;AAFA;AAEA;AAAA;AAFA;AACA;AADA;AAGA;AAAA;AAHA;AACA;AAGA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;A","sourceRoot":""}