{"version":3,"file":"static/webpack/static\\development\\pages\\post\\[category].js.7e72836a6a58e31dc4dd.hot-update.js","sources":["webpack:///./pages/post/[category].tsx"],"sourcesContent":["import React, { useEffect, Context } from \"react\";\r\nimport { NextPage, NextPageContext } from \"next\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { GET_POSTS_REQUEST } from \"../../reducers/post/actions\";\r\nimport { store } from \"../../reducers/types\";\r\nimport { Link, Grid, Typography, Divider, Paper } from \"@material-ui/core\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      margin: \"auto\",\r\n      maxWidth: 500,\r\n      textDecoration: \"none\"\r\n    },\r\n    image: {\r\n      width: 128,\r\n      height: 128\r\n    },\r\n    img: {\r\n      margin: \"auto\",\r\n      display: \"block\",\r\n      maxWidth: \"100%\",\r\n      maxHeight: \"100%\"\r\n    }\r\n  })\r\n);\r\n\r\nconst Post = () => {\r\n  const { posts } = useSelector((state: store) => state.post);\r\n  const router = useRouter();\r\n  const { category } = router.query;\r\n\r\n  const classes = useStyles({});\r\n\r\n  const CategoryName = ({ category }) => {\r\n    switch (category) {\r\n      case \"dev\": {\r\n        return (\r\n          <Typography variant=\"h2\" color=\"primary\">\r\n            개발\r\n          </Typography>\r\n        );\r\n      }\r\n      case \"hacking\": {\r\n        return (\r\n          <Typography variant=\"h2\" color=\"error\">\r\n            해킹\r\n          </Typography>\r\n        );\r\n      }\r\n      case \"finance\": {\r\n        return (\r\n          <Typography variant=\"h2\" color=\"initial\">\r\n            재테크\r\n          </Typography>\r\n        );\r\n      }\r\n      case \"business\": {\r\n        return (\r\n          <Typography variant=\"h2\" color=\"secondary\">\r\n            비즈니스\r\n          </Typography>\r\n        );\r\n        break;\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container justify=\"center\" spacing={3} className={classes.root}>\r\n        <Grid item xs={12}>\r\n          <CategoryName category={category} />\r\n        </Grid>\r\n        <Divider />\r\n        {posts &&\r\n          posts.map(post => {\r\n            return (\r\n              <>\r\n                <Link href={`/post/${category}/${post.title}`} key={post._id}>\r\n                  <Grid key={post._id} item xs={6}>\r\n                    <Paper className={classes.paper}>\r\n                      <Typography variant=\"h5\">{post.title}</Typography>\r\n                      <Typography variant=\"h6\">{post.nickname}</Typography>\r\n                      <Typography variant=\"inherit\">{post.Date}</Typography>\r\n                    </Paper>\r\n                  </Grid>\r\n                </Link>\r\n              </>\r\n            );\r\n          })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nPost.getInitialProps = async ctx => {\r\n  const { category } = ctx.query;\r\n  ctx.store.dispatch({\r\n    type: GET_POSTS_REQUEST,\r\n    payload: { category }\r\n  });\r\n};\r\n\r\nexport default Post;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAdA;AADA;AACA;AAuBA;AAAA;AACA;AAAA;AADA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAhCA;AAkCA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;;;;A","sourceRoot":""}