{"version":3,"file":"static/webpack/static\\development\\pages\\post\\[category]\\[title].js.9c02943d87caedf629c0.hot-update.js","sources":["webpack:///./Components/draft/Renderer.js"],"sourcesContent":["import React, { Component } from \"react\";\r\n\r\n/**\r\n *  You can use inline styles or classNames inside your callbacks\r\n */\r\nconst styles = {\r\n  code: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\r\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n    fontSize: 16,\r\n    padding: 2\r\n  },\r\n  codeBlock: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\r\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n    fontSize: 16,\r\n    padding: 20\r\n  }\r\n};\r\n\r\n// just a helper to add a <br /> after a block\r\nconst addBreaklines = children => children.map(child => [child, <br />]);\r\n\r\n/**\r\n * Define the renderers\r\n */\r\nconst renderers = {\r\n  /**\r\n   * Those callbacks will be called recursively to render a nested structure\r\n   */\r\n  inline: {\r\n    // The key passed here is just an index based on rendering order inside a block\r\n    BOLD: (children, { key }) => <strong key={key}>{children}</strong>,\r\n    ITALIC: (children, { key }) => <em key={key}>{children}</em>,\r\n    UNDERLINE: (children, { key }) => <u key={key}>{children}</u>,\r\n    CODE: (children, { key }) => (\r\n      <span key={key} style={styles.code}>\r\n        {children}\r\n      </span>\r\n    )\r\n  },\r\n  /**\r\n   * Blocks receive children and depth\r\n   * Note that children are an array of blocks with same styling,\r\n   */\r\n  blocks: {\r\n    unstyled: children => children.map(child => <p>{child}</p>),\r\n    blockquote: children => <blockquote>{addBreaklines(children)}</blockquote>,\r\n    \"header-one\": children => children.map(child => <h1>{child}</h1>),\r\n    \"header-two\": children => children.map(child => <h2>{child}</h2>),\r\n    // You can also access the original keys of the blocks\r\n    \"code-block\": (children, { keys }) => (\r\n      <pre style={styles.codeBlock} key={keys[0]}>\r\n        {addBreaklines(children)}\r\n      </pre>\r\n    ),\r\n    // or depth for nested lists\r\n    \"unordered-list-item\": (children, { depth, keys }) => (\r\n      <ul key={keys[keys.length - 1]} className={`ul-level-${depth}`}>\r\n        {children.map(child => (\r\n          <li>{child}</li>\r\n        ))}\r\n      </ul>\r\n    ),\r\n    \"ordered-list-item\": (children, { depth, keys }) => (\r\n      <ol key={keys.join(\"|\")} className={`ol-level-${depth}`}>\r\n        {children.map((child, index) => (\r\n          <li key={keys[index]}>{child}</li>\r\n        ))}\r\n      </ol>\r\n    ),\r\n    // If your blocks use meta data it can also be accessed like keys\r\n    atomic: (children, { keys, data }) =>\r\n      children.map((child, i) => <Atomic key={keys[i]} {...data[i]} />)\r\n  },\r\n  /**\r\n   * Entities receive children and the entity data\r\n   */\r\n  entities: {\r\n    // key is the entity key value from raw\r\n    LINK: (children, data, { key }) => (\r\n      <Link key={key} to={data.url}>\r\n        {children}\r\n      </Link>\r\n    )\r\n  },\r\n  /**\r\n   * Array of decorators,\r\n   * Entities receive children and the entity data,\r\n   * inspired by https://facebook.github.io/draft-js/docs/advanced-topics-decorators.html\r\n   * it's also possible to pass a custom Decorator class that matches the [DraftDecoratorType](https://github.com/facebook/draft-js/blob/master/src/model/decorators/DraftDecoratorType.js)\r\n   */\r\n  decorators: [\r\n    {\r\n      // by default linkStrategy receives a ContentBlock stub (more info under Creating the ContentBlock)\r\n      // strategy only receives first two arguments, contentState is yet not provided\r\n\r\n      // component - a callback as with other renderers\r\n      // decoratedText a plain string matched by the strategy\r\n      // if your decorator depends on draft-js contentState you need to provide convertFromRaw in redraft options\r\n      component: ({ children, decoratedText }) => (\r\n        <a href={decoratedText}>{children}</a>\r\n      )\r\n    },\r\n    new CustomDecorator(someOptions)\r\n  ]\r\n};\r\n\r\nexport default class Renderer extends Component {\r\n  static propTypes = {\r\n    raw: PropTypes.object\r\n  };\r\n\r\n  renderWarning() {\r\n    return <div>Nothing to render.</div>;\r\n  }\r\n\r\n  render() {\r\n    const { raw } = this.props;\r\n    if (!raw) {\r\n      return this.renderWarning();\r\n    }\r\n    const rendered = redraft(raw, renderers);\r\n    // redraft returns a null if there's nothing to render\r\n    if (!rendered) {\r\n      return this.renderWarning();\r\n    }\r\n    return <div>{rendered}</div>;\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAPA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;AAGA;AACA;;;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AALA;AACA;AAUA;;;;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AA3BA;AACA;AA6BA;;;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AACA;AAOA;;;;;;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAPA;AAnEA;AACA;AAiFA;;;;;;;;;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AApBA;AACA;AADA;AAEA;AADA;AACA;;;;;A","sourceRoot":""}