{"version":3,"file":"static/webpack/static\\development\\pages\\signup.js.4200db185653b8c7ea9f.hot-update.js","sources":["webpack:///./Components/SignUp/SignUpForm.tsx"],"sourcesContent":["import React, { FunctionComponent, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Link,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport { Theme, makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { store } from \"../../reducers/types\";\r\nimport validateEmailInput from \"../../utils/validateEmailInput\";\r\nimport { SIGN_UP_REQUEST } from \"../../reducers/user/actions\";\r\nimport CircularProgressComponent from \"../../utils/Components/CircularProgressComponent\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    form: {\r\n      width: \"100%\", // Fix IE 11 issue.\r\n      marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2)\r\n    }\r\n  })\r\n);\r\n\r\nconst SignUpForm: FunctionComponent = () => {\r\n  const { isSigning } = useSelector((state: store) => state.user.loadingStates);\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles({});\r\n  const [nickname, setNickname] = useState(\"\");\r\n  const [nicknameError, setNicknameError] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(\"\");\r\n  const [passwordCheck, setPasswordCheck] = useState(\"\");\r\n  const [passwordCheckError, setPasswordCheckError] = useState(\"\");\r\n\r\n  const handleSubmitForm = event => {\r\n    event.preventDefault();\r\n    let validate = true;\r\n    if (!validateEmailInput(email)) {\r\n      setEmailError(\"올바르지 않은 이메일 주소입니다.\");\r\n      validate = false;\r\n    }\r\n    if (email.trim() === \"\") {\r\n      setEmailError(\"이메일 주소를 입력해주세요\");\r\n      validate = false;\r\n    }\r\n    if (password.trim() === \"\") {\r\n      setPasswordError(\"비밀번호를 입력해주세요\");\r\n      validate = false;\r\n    }\r\n    if (passwordCheck.trim() === \"\") {\r\n      setPasswordCheckError(\"비밀번호 확인란을 입력해주세요\");\r\n      validate = false;\r\n    }\r\n    if (password !== passwordCheck) {\r\n      setPasswordCheckError(\"비밀번호가 같지 않습니다\");\r\n      validate = false;\r\n    }\r\n    if (validate) {\r\n      dispatch({\r\n        type: SIGN_UP_REQUEST,\r\n        payload: {\r\n          email,\r\n          nickname,\r\n          password\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleNickname = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (nicknameError) {\r\n      setNicknameError(\"\");\r\n    }\r\n    setNickname(event.target.value);\r\n  };\r\n\r\n  const handleEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (emailError) {\r\n      setEmailError(\"\");\r\n    }\r\n    setEmail(event.target.value);\r\n  };\r\n  const handdlePassword = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (passwordError) {\r\n      setPasswordError(\"\");\r\n    }\r\n    setPassword(event.target.value);\r\n  };\r\n  const handdlePasswordCheck = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (passwordCheckError) {\r\n      setPasswordCheckError(\"\");\r\n    }\r\n    setPasswordCheck(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <form className={classes.form} noValidate onSubmit={handleSubmitForm}>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            error={!!nicknameError}\r\n            helperText={nicknameError}\r\n            autoComplete=\"nickname\"\r\n            name=\"nickname\"\r\n            variant=\"outlined\"\r\n            required\r\n            fullWidth\r\n            id=\"nickname\"\r\n            label=\"닉네임\"\r\n            autoFocus\r\n            value={nickname}\r\n            onChange={handleNickname}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            error={!!emailError}\r\n            helperText={emailError}\r\n            variant=\"outlined\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"이메일 주소\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            value={email}\r\n            onChange={handleEmail}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            error={!!passwordError}\r\n            helperText={passwordError}\r\n            variant=\"outlined\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"비밀번호\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            value={password}\r\n            onChange={handdlePassword}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            error={!!passwordCheckError}\r\n            helperText={passwordCheckError}\r\n            variant=\"outlined\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"비밀번호 확인\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            value={passwordCheck}\r\n            onChange={handdlePasswordCheck}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <FormControlLabel\r\n            control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\r\n            label=\"알람을 받고 싶습니다. 이메일을 통해 알람을 받을래요! \"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Button\r\n        type=\"submit\"\r\n        fullWidth\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className={classes.submit}\r\n        disabled={isSigning}\r\n      >\r\n        {isSigning && <CircularProgressComponent />}\r\n        회원 가입\r\n      </Button>\r\n      <Grid container justify=\"flex-end\">\r\n        <Grid item>\r\n          <Link href=\"#\" variant=\"body2\">\r\n            계정이 이미 있나요? 로그인\r\n          </Link>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SignUpForm;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AAFA;AAIA;AACA;AADA;AALA;AADA;AACA;AAWA;AAAA;AACA;AAAA;AADA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;A","sourceRoot":""}